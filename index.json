{
  "api/Mecha.Core.Datasources.DataManager.html": {
    "href": "api/Mecha.Core.Datasources.DataManager.html",
    "title": "Class DataManager | Mecha API Reference",
    "summary": "Class DataManager Namespace Mecha.Core.Datasources Assembly Mecha.Core.dll Data manager public class DataManager Inheritance object DataManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors DataManager(IEnumerable<IDatasource>, IEnumerable<ISerializer>) Initializes a new instance of the DataManager class. public DataManager(IEnumerable<IDatasource> datasources, IEnumerable<ISerializer> serializers) Parameters datasources IEnumerable<IDatasource> The datasources. serializers IEnumerable<ISerializer> The serializers. Methods Clear(MethodInfo) Clears the specified method data. public void Clear(MethodInfo method) Parameters method MethodInfo The method. Read(MethodInfo) Reads the specified method's data. public List<object?[]> Read(MethodInfo method) Parameters method MethodInfo The method. Returns List<object[]> The data specified. Save(MethodInfo, object?[]) Saves the specified method's data. public void Save(MethodInfo method, object?[] data) Parameters method MethodInfo The method. data object[] The data."
  },
  "api/Mecha.Core.Datasources.Defaults.DefaultDatasource.html": {
    "href": "api/Mecha.Core.Datasources.Defaults.DefaultDatasource.html",
    "title": "Class DefaultDatasource | Mecha API Reference",
    "summary": "Class DefaultDatasource Namespace Mecha.Core.Datasources.Defaults Assembly Mecha.Core.dll Default datasource (exports to local directory) public class DefaultDatasource : IDatasource Inheritance object DefaultDatasource Implements IDatasource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors DefaultDatasource() Initializes a new instance of the DefaultDatasource class. public DefaultDatasource() Methods Clear(MethodInfo) Clears the specified method's param data. public void Clear(MethodInfo method) Parameters method MethodInfo The method. Read(MethodInfo, ISerializer) Retrieves the data for the specified method. public List<object?[]> Read(MethodInfo method, ISerializer serializer) Parameters method MethodInfo The method. serializer ISerializer The serializer. Returns List<object[]> The list of data for the method. Save(MethodInfo, object?[], ISerializer) Saves the specified param data for the method. public void Save(MethodInfo method, object?[] paramData, ISerializer serializer) Parameters method MethodInfo The method. paramData object[] The parameter data. serializer ISerializer The serializer. See Also IDatasource"
  },
  "api/Mecha.Core.Datasources.Defaults.DefaultSerializer.html": {
    "href": "api/Mecha.Core.Datasources.Defaults.DefaultSerializer.html",
    "title": "Class DefaultSerializer | Mecha API Reference",
    "summary": "Class DefaultSerializer Namespace Mecha.Core.Datasources.Defaults Assembly Mecha.Core.dll Default serializer (goes to JSON) public class DefaultSerializer : ISerializer Inheritance object DefaultSerializer Implements ISerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods Deserialize(Type, string?) Deserializes the specified data. public object? Deserialize(Type objectType, string? data) Parameters objectType Type Type of the object. data string The data. Returns object The deserialized value. Serialize(Type, object?) Serializes the specified data. public string? Serialize(Type objectType, object? data) Parameters objectType Type Type of the object. data object The data. Returns string The serialized value used for storage. See Also ISerializer"
  },
  "api/Mecha.Core.Datasources.Defaults.html": {
    "href": "api/Mecha.Core.Datasources.Defaults.html",
    "title": "Namespace Mecha.Core.Datasources.Defaults | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Datasources.Defaults Classes DefaultDatasource Default datasource (exports to local directory) DefaultSerializer Default serializer (goes to JSON)"
  },
  "api/Mecha.Core.Datasources.Interfaces.IDatasource.html": {
    "href": "api/Mecha.Core.Datasources.Interfaces.IDatasource.html",
    "title": "Interface IDatasource | Mecha API Reference",
    "summary": "Interface IDatasource Namespace Mecha.Core.Datasources.Interfaces Assembly Mecha.Core.dll Datasource public interface IDatasource Extension Methods UtilsExtensions.IsInfinite(object?) Methods Clear(MethodInfo) Clears the specified method's param data. void Clear(MethodInfo method) Parameters method MethodInfo The method. Read(MethodInfo, ISerializer) Retrieves the data for the specified method. List<object?[]> Read(MethodInfo method, ISerializer serializer) Parameters method MethodInfo The method. serializer ISerializer The serializer. Returns List<object[]> The list of data for the method. Save(MethodInfo, object?[], ISerializer) Saves the specified param data for the method. void Save(MethodInfo method, object?[] paramData, ISerializer serializer) Parameters method MethodInfo The method. paramData object[] The parameter data. serializer ISerializer The serializer."
  },
  "api/Mecha.Core.Datasources.Interfaces.ISerializer.html": {
    "href": "api/Mecha.Core.Datasources.Interfaces.ISerializer.html",
    "title": "Interface ISerializer | Mecha API Reference",
    "summary": "Interface ISerializer Namespace Mecha.Core.Datasources.Interfaces Assembly Mecha.Core.dll Serializer interface public interface ISerializer Extension Methods UtilsExtensions.IsInfinite(object?) Methods Deserialize(Type, string?) Deserializes the specified data. object? Deserialize(Type objectType, string? data) Parameters objectType Type Type of the object. data string The data. Returns object The deserialized value. Serialize(Type, object?) Serializes the specified data. string? Serialize(Type objectType, object? data) Parameters objectType Type Type of the object. data object The data. Returns string The serialized value used for storage."
  },
  "api/Mecha.Core.Datasources.Interfaces.html": {
    "href": "api/Mecha.Core.Datasources.Interfaces.html",
    "title": "Namespace Mecha.Core.Datasources.Interfaces | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Datasources.Interfaces Interfaces IDatasource Datasource ISerializer Serializer interface"
  },
  "api/Mecha.Core.Datasources.html": {
    "href": "api/Mecha.Core.Datasources.html",
    "title": "Namespace Mecha.Core.Datasources | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Datasources Classes DataManager Data manager"
  },
  "api/Mecha.Core.DoNotBreakAttribute.html": {
    "href": "api/Mecha.Core.DoNotBreakAttribute.html",
    "title": "Class DoNotBreakAttribute | Mecha API Reference",
    "summary": "Class DoNotBreakAttribute Namespace Mecha.Core Assembly Mecha.Core.dll Property attribute [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property, AllowMultiple = false)] public class DoNotBreakAttribute : Attribute Inheritance object Attribute DoNotBreakAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) See Also Attribute"
  },
  "api/Mecha.Core.ExceptionHandler.html": {
    "href": "api/Mecha.Core.ExceptionHandler.html",
    "title": "Class ExceptionHandler | Mecha API Reference",
    "summary": "Class ExceptionHandler Namespace Mecha.Core Assembly Mecha.Core.dll Exception handler public class ExceptionHandler Inheritance object ExceptionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanIgnore(Exception?, MethodInfo?) Determines whether this instance can ignore the specified exception. public bool CanIgnore(Exception? exception, MethodInfo? method) Parameters exception Exception The exception. method MethodInfo The method. Returns bool true if this instance can ignore the specified exception; otherwise, false. IgnoreException<TException>(Func<Exception, MethodInfo, bool>?) Adds an exception to the ignore list. public ExceptionHandler IgnoreException<TException>(Func<Exception, MethodInfo, bool>? handler = null) Parameters handler Func<Exception, MethodInfo, bool> The handler (if not provided, a default handler is used). Returns ExceptionHandler This. Type Parameters TException The type of the exception."
  },
  "api/Mecha.Core.Exceptions.GeneratorException.html": {
    "href": "api/Mecha.Core.Exceptions.GeneratorException.html",
    "title": "Class GeneratorException | Mecha API Reference",
    "summary": "Class GeneratorException Namespace Mecha.Core.Exceptions Assembly Mecha.Core.dll Generator exception public class GeneratorException : Exception, ISerializable Inheritance object Exception GeneratorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UtilsExtensions.IsInfinite(object?) Constructors GeneratorException() Initializes a new instance of the GeneratorException class. public GeneratorException() GeneratorException(string?) Initializes a new instance of the GeneratorException class. public GeneratorException(string? message) Parameters message string The message that describes the error. GeneratorException(string?, Exception?) Initializes a new instance of the GeneratorException class. public GeneratorException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. See Also Exception"
  },
  "api/Mecha.Core.Exceptions.MethodBrokenException.html": {
    "href": "api/Mecha.Core.Exceptions.MethodBrokenException.html",
    "title": "Class MethodBrokenException | Mecha API Reference",
    "summary": "Class MethodBrokenException Namespace Mecha.Core.Exceptions Assembly Mecha.Core.dll The method threw an exception public class MethodBrokenException : Exception, ISerializable Inheritance object Exception MethodBrokenException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UtilsExtensions.IsInfinite(object?) Constructors MethodBrokenException() Initializes a new instance of the MethodBrokenException class. public MethodBrokenException() MethodBrokenException(string?) Initializes a new instance of the MethodBrokenException class. public MethodBrokenException(string? message) Parameters message string The message that describes the error. MethodBrokenException(string?, Exception?) Initializes a new instance of the MethodBrokenException class. public MethodBrokenException(string? message, Exception? innerException) Parameters message string The error message that explains the reason for the exception. innerException Exception The exception that is the cause of the current exception, or a null reference ( Nothing in Visual Basic) if no inner exception is specified. See Also Exception"
  },
  "api/Mecha.Core.Exceptions.html": {
    "href": "api/Mecha.Core.Exceptions.html",
    "title": "Namespace Mecha.Core.Exceptions | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Exceptions Classes GeneratorException Generator exception MethodBrokenException The method threw an exception"
  },
  "api/Mecha.Core.ExtensionMethods.CanisterMethods.html": {
    "href": "api/Mecha.Core.ExtensionMethods.CanisterMethods.html",
    "title": "Class CanisterMethods | Mecha API Reference",
    "summary": "Class CanisterMethods Namespace Mecha.Core.ExtensionMethods Assembly Mecha.Core.dll Canister methods public static class CanisterMethods Inheritance object CanisterMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterMecha(ICanisterConfiguration?) Registers the system with canister. public static ICanisterConfiguration? RegisterMecha(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper. RegisterMecha(IServiceCollection?) Registers the Mecha services with the provided IServiceCollection. public static IServiceCollection? RegisterMecha(this IServiceCollection? services) Parameters services IServiceCollection The service collection to register the services with. Returns IServiceCollection The updated service collection."
  },
  "api/Mecha.Core.ExtensionMethods.ServiceCollectionExtensions.html": {
    "href": "api/Mecha.Core.ExtensionMethods.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Mecha API Reference",
    "summary": "Class ServiceCollectionExtensions Namespace Mecha.Core.ExtensionMethods Assembly Mecha.Core.dll ServiceCollection extension methods. public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddMecha(IServiceCollection?) Adds mecha to the service collection. public static IServiceCollection? AddMecha(this IServiceCollection? serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service descriptors. Returns IServiceCollection The service collection."
  },
  "api/Mecha.Core.ExtensionMethods.UtilsExtensions.html": {
    "href": "api/Mecha.Core.ExtensionMethods.UtilsExtensions.html",
    "title": "Class UtilsExtensions | Mecha API Reference",
    "summary": "Class UtilsExtensions Namespace Mecha.Core.ExtensionMethods Assembly Mecha.Core.dll Utils extensions public static class UtilsExtensions Inheritance object UtilsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetUnderlyingArrayType(Type?) Gets the underlying array type if it exists public static Type? GetUnderlyingArrayType(this Type? type) Parameters type Type Type to check. Returns Type The underlying array type if it exists, null otherwise. IsArraySegment(Type?) Determines whether the specified type is an array segment. public static bool IsArraySegment(this Type? type) Parameters type Type The type Returns bool True if it is an array segment, false otherwise. IsInfinite(object?) Determines whether the specified value is infinite. public static bool IsInfinite(this object? value) Parameters value object The value. Returns bool true if the specified value is infinite; otherwise, false. IsMemory(Type?) Determines whether the specified type is a Memory. public static bool IsMemory(this Type? type) Parameters type Type The type. Returns bool True if it is a Memory, false otherwise. IsNullable(Type?) Determines whether the specified type is a nullable. public static bool IsNullable(this Type? type) Parameters type Type The type. Returns bool True if it is a nullable, false otherwise. IsReadOnlyMemory(Type?) Determines whether the specified type is a ReadOnlyMemory. public static bool IsReadOnlyMemory(this Type? type) Parameters type Type The type. Returns bool True if it is a ReadOnlyMemory, false otherwise. IsReadOnlySpan(Type?) Determines whether the specified type is a ReadOnlySpan. public static bool IsReadOnlySpan(this Type? type) Parameters type Type The type Returns bool True if it is a ReadOnlySpan, false otherwise. IsSpan(Type?) Determines whether the specified type is a Span. public static bool IsSpan(this Type? type) Parameters type Type The type Returns bool True if it is a Span, false otherwise. IsSpecialType(Type?, out Type?) Determines whether the specified type is one of the special types. public static bool IsSpecialType(this Type? type, out Type? specialType) Parameters type Type The type. specialType Type The special type. Returns bool True if it is a special case type, false otherweise. IsStruct(Type?) Determines whether the specified type is a struct. public static bool IsStruct(this Type? type) Parameters type Type The type. Returns bool True if it is a struct, false otherwise."
  },
  "api/Mecha.Core.ExtensionMethods.html": {
    "href": "api/Mecha.Core.ExtensionMethods.html",
    "title": "Namespace Mecha.Core.ExtensionMethods | Mecha API Reference",
    "summary": "Namespace Mecha.Core.ExtensionMethods Classes CanisterMethods Canister methods ServiceCollectionExtensions ServiceCollection extension methods. UtilsExtensions Utils extensions"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.ArrayGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.ArrayGenerator.html",
    "title": "Class ArrayGenerator | Mecha API Reference",
    "summary": "Class ArrayGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Array generator public class ArrayGenerator : IGenerator Inheritance object ArrayGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors ArrayGenerator(Random?) Initializes a new instance of the ArrayGenerator class. public ArrayGenerator(Random? random) Parameters random Random The random. Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.DefaultGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.DefaultGenerator.html",
    "title": "Class DefaultGenerator | Mecha API Reference",
    "summary": "Class DefaultGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Default generator public class DefaultGenerator : IGenerator Inheritance object DefaultGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors DefaultGenerator(Random) Initializes a new instance of the DefaultGenerator class. public DefaultGenerator(Random random) Parameters random Random The random. Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.DefaultValueGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.DefaultValueGenerator.html",
    "title": "Class DefaultValueGenerator | Mecha API Reference",
    "summary": "Class DefaultValueGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Default value generator public class DefaultValueGenerator : IGenerator Inheritance object DefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.FileStreamGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.FileStreamGenerator.html",
    "title": "Class FileStreamGenerator | Mecha API Reference",
    "summary": "Class FileStreamGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll File stream generator public class FileStreamGenerator : IGenerator Inheritance object FileStreamGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Initializes a new instance of the FileStreamGenerator class. Constructors FileStreamGenerator(Random) File stream generator public FileStreamGenerator(Random random) Parameters random Random The random. Remarks Initializes a new instance of the FileStreamGenerator class. See Also IGenerator Properties Order Gets the order. public int Order { get; } Property Value int The order. RandomObj Gets the random object. public Random RandomObj { get; } Property Value Random The random object. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.HttpClientGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.HttpClientGenerator.html",
    "title": "Class HttpClientGenerator | Mecha API Reference",
    "summary": "Class HttpClientGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll HttpClient Generator public class HttpClientGenerator : IGenerator Inheritance object HttpClientGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Initializes a new instance of the FileStreamGenerator class. Constructors HttpClientGenerator(Random) HttpClient Generator public HttpClientGenerator(Random random) Parameters random Random The random. Remarks Initializes a new instance of the FileStreamGenerator class. See Also IGenerator Properties Order Gets the order. public int Order { get; } Property Value int The order. RandomObj Gets the random object. public Random RandomObj { get; } Property Value Random The random object. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.InterfaceGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.InterfaceGenerator.html",
    "title": "Class InterfaceGenerator | Mecha API Reference",
    "summary": "Class InterfaceGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Interface generator public class InterfaceGenerator : IGenerator Inheritance object InterfaceGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.MaxBoundaryGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.MaxBoundaryGenerator.html",
    "title": "Class MaxBoundaryGenerator | Mecha API Reference",
    "summary": "Class MaxBoundaryGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Max Boundary generator public class MaxBoundaryGenerator : IGenerator Inheritance object MaxBoundaryGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.MinBoundaryGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.MinBoundaryGenerator.html",
    "title": "Class MinBoundaryGenerator | Mecha API Reference",
    "summary": "Class MinBoundaryGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Min Boundary generator public class MinBoundaryGenerator : IGenerator Inheritance object MinBoundaryGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.NegationGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.NegationGenerator.html",
    "title": "Class NegationGenerator | Mecha API Reference",
    "summary": "Class NegationGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Negation generator public class NegationGenerator : IGenerator Inheritance object NegationGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors NegationGenerator(Random) Initializes a new instance of the NegationGenerator class. public NegationGenerator(Random random) Parameters random Random The random. Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html",
    "title": "Class ParameterDefaultValueGenerator | Mecha API Reference",
    "summary": "Class ParameterDefaultValueGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Parameter default value generator public class ParameterDefaultValueGenerator : IGenerator Inheritance object ParameterDefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.SliceGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.SliceGenerator.html",
    "title": "Class SliceGenerator | Mecha API Reference",
    "summary": "Class SliceGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Slice generator public class SliceGenerator : IGenerator Inheritance object SliceGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.SpecialGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.SpecialGenerator.html",
    "title": "Class SpecialGenerator | Mecha API Reference",
    "summary": "Class SpecialGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Special generator class. public class SpecialGenerator : IGenerator Inheritance object SpecialGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Initializes a new instance of the SpecialGenerator class. Constructors SpecialGenerator(Random?) Special generator class. public SpecialGenerator(Random? random) Parameters random Random The random generator. Remarks Initializes a new instance of the SpecialGenerator class. See Also IGenerator Properties Order Gets the order. public int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.StreamGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.StreamGenerator.html",
    "title": "Class StreamGenerator | Mecha API Reference",
    "summary": "Class StreamGenerator Namespace Mecha.Core.Generator.DefaultGenerators Assembly Mecha.Core.dll Stream generator public class StreamGenerator : IGenerator Inheritance object StreamGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors StreamGenerator(Random) Initializes a new instance of the StreamGenerator class. public StreamGenerator(Random random) Parameters random Random The random. Properties Order Gets the order. public int Order { get; } Property Value int The order. RandomObj Gets the random object. public Random RandomObj { get; } Property Value Random The random object. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. public bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. public ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object. See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.DummyClass.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.DummyClass.html",
    "title": "Class BasicTypesLookup.DummyClass | Mecha API Reference",
    "summary": "Class BasicTypesLookup.DummyClass Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Dummy class public class BasicTypesLookup.DummyClass Inheritance object BasicTypesLookup.DummyClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.html",
    "title": "Class BasicTypesLookup | Mecha API Reference",
    "summary": "Class BasicTypesLookup Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Basic types lookup public static class BasicTypesLookup Inheritance object BasicTypesLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Types The types public static Type[] Types Field Value Type[]"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.DefaultValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.DefaultValueLookup.html",
    "title": "Class DefaultValueLookup | Mecha API Reference",
    "summary": "Class DefaultValueLookup Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Default value lookup public static class DefaultValueLookup Inheritance object DefaultValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Values The values public static Dictionary<int, object?> Values { get; } Property Value Dictionary<int, object>"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.MaxValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.MaxValueLookup.html",
    "title": "Class MaxValueLookup | Mecha API Reference",
    "summary": "Class MaxValueLookup Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Max value lookup public static class MaxValueLookup Inheritance object MaxValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Max Gets or sets the maximum. public static Dictionary<int, object>? Max { get; } Property Value Dictionary<int, object> The maximum."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.MinValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.MinValueLookup.html",
    "title": "Class MinValueLookup | Mecha API Reference",
    "summary": "Class MinValueLookup Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Min value lookup public static class MinValueLookup Inheritance object MinValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Min Gets or sets the minimum. public static Dictionary<int, object>? Min { get; } Property Value Dictionary<int, object> The minimum."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.NegateValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.NegateValueLookup.html",
    "title": "Class NegateValueLookup | Mecha API Reference",
    "summary": "Class NegateValueLookup Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Negate value lookup public static class NegateValueLookup Inheritance object NegateValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Negate Gets the negate. public static Dictionary<int, Func<object, object>>? Negate { get; } Property Value Dictionary<int, Func<object, object>> The negate."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.SliceValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.SliceValueLookup.html",
    "title": "Class SliceValueLookup | Mecha API Reference",
    "summary": "Class SliceValueLookup Namespace Mecha.Core.Generator.DefaultGenerators.Utils Assembly Mecha.Core.dll Slice value lookup public static class SliceValueLookup Inheritance object SliceValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Slice Slices the items and gets the mid point between the two values. public static Dictionary<int, Func<object, object, object>>? Slice { get; } Property Value Dictionary<int, Func<object, object, object>> The mid point between the two values."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.html",
    "title": "Namespace Mecha.Core.Generator.DefaultGenerators.Utils | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Generator.DefaultGenerators.Utils Classes BasicTypesLookup Basic types lookup BasicTypesLookup.DummyClass Dummy class DefaultValueLookup Default value lookup MaxValueLookup Max value lookup MinValueLookup Min value lookup NegateValueLookup Negate value lookup SliceValueLookup Slice value lookup"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.html",
    "title": "Namespace Mecha.Core.Generator.DefaultGenerators | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Generator.DefaultGenerators Classes ArrayGenerator Array generator DefaultGenerator Default generator DefaultValueGenerator Default value generator FileStreamGenerator File stream generator HttpClientGenerator HttpClient Generator InterfaceGenerator Interface generator MaxBoundaryGenerator Max Boundary generator MinBoundaryGenerator Min Boundary generator NegationGenerator Negation generator ParameterDefaultValueGenerator Parameter default value generator SliceGenerator Slice generator SpecialGenerator Special generator class. StreamGenerator Stream generator"
  },
  "api/Mecha.Core.Generator.GeneratorManager.html": {
    "href": "api/Mecha.Core.Generator.GeneratorManager.html",
    "title": "Class GeneratorManager | Mecha API Reference",
    "summary": "Class GeneratorManager Namespace Mecha.Core.Generator Assembly Mecha.Core.dll Generator manager public class GeneratorManager Inheritance object GeneratorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Initializes a new instance of the GeneratorManager class. Constructors GeneratorManager(IEnumerable<IGenerator>, Random) Generator manager public GeneratorManager(IEnumerable<IGenerator> generators, Random random) Parameters generators IEnumerable<IGenerator> The generators. random Random The random. Remarks Initializes a new instance of the GeneratorManager class. Properties Random Gets the random. public Random Random { get; } Property Value Random The random. Methods GenerateParameterValues(ParameterInfo[], Options?) Generates the parameter values. public ParameterValues[] GenerateParameterValues(ParameterInfo[] parameters, Options? options) Parameters parameters ParameterInfo[] The parameters. options Options The options. Returns ParameterValues[] The parameter values"
  },
  "api/Mecha.Core.Generator.Helpers.EmptyFileStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.EmptyFileStream.html",
    "title": "Class EmptyFileStream | Mecha API Reference",
    "summary": "Class EmptyFileStream Namespace Mecha.Core.Generator.Helpers Assembly Mecha.Core.dll Empty file stream public class EmptyFileStream : FileStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream FileStream EmptyFileStream Implements IAsyncDisposable IDisposable Inherited Members FileStream.Dispose(bool) FileStream.DisposeAsync() FileStream.Name FileStream.SafeFileHandle Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors EmptyFileStream() Initializes a new instance of the EmptyFileStream class. public EmptyFileStream() Properties CanRead Gets a value that indicates whether the current stream supports reading. public override bool CanRead { get; } Property Value bool CanSeek Gets a value that indicates whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool CanTimeout Gets a value that determines whether the current stream can time out. public override bool CanTimeout { get; } Property Value bool CanWrite Gets a value that indicates whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool Handle Gets the operating system file handle for the file that the current object encapsulates. [Obsolete(\"Handle no longer used\")] public override nint Handle { get; } Property Value nint IsAsync Gets a value that indicates whether the FileStream was opened asynchronously or synchronously. public override bool IsAsync { get; } Property Value bool Length Gets the length in bytes of the stream. public override long Length { get; } Property Value long Position Gets or sets the current position of this stream. public override long Position { get; set; } Property Value long ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. public override int ReadTimeout { get; set; } Property Value int WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. public override int WriteTimeout { get; set; } Property Value int Methods BeginRead(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous read operation. Consider using ReadAsync(byte[], int, int, CancellationToken) instead. public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback? callback, object? state) Parameters array byte[] The buffer to read data into. offset int The byte offset in array at which to begin reading. numBytes int The maximum number of bytes to read. callback AsyncCallback The method to be called when the asynchronous read operation is completed. state object A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns IAsyncResult An object that references the asynchronous read. Exceptions FileNotFoundException BeginWrite(byte[], int, int, AsyncCallback?, object?) Begins an asynchronous write operation. Consider using WriteAsync(byte[], int, int, CancellationToken) instead. public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback? callback, object? state) Parameters array byte[] The buffer containing data to write to the current stream. offset int The zero-based byte offset in array at which to begin copying bytes to the current stream. numBytes int The maximum number of bytes to write. callback AsyncCallback The method to be called when the asynchronous write operation is completed. state object A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns IAsyncResult An object that references the asynchronous write. Exceptions EndOfStreamException Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. public override void Close() Exceptions EndOfStreamException CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. public override void CopyTo(Stream destination, int bufferSize) Parameters destination Stream The stream to which the contents of the current stream will be copied. bufferSize int The size of the buffer. This value must be greater than zero. The default size is 81920. Exceptions EndOfStreamException CopyToAsync(Stream, int, CancellationToken) Copies to asynchronous. public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters destination Stream The destination. bufferSize int Size of the buffer. cancellationToken CancellationToken The cancellation token. Returns Task Exceptions EndOfStreamException EndRead(IAsyncResult) Waits for the pending asynchronous read operation to complete. (Consider using ReadAsync(byte[], int, int, CancellationToken) instead.) public override int EndRead(IAsyncResult asyncResult) Parameters asyncResult IAsyncResult The reference to the pending asynchronous request to wait for. Returns int The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available. Exceptions FileNotFoundException EndWrite(IAsyncResult) Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using WriteAsync(byte[], int, int, CancellationToken) instead.) public override void EndWrite(IAsyncResult asyncResult) Parameters asyncResult IAsyncResult The pending asynchronous I/O request. Exceptions FileNotFoundException ~EmptyFileStream() Finalizes an instance of the FaultyFileStream class. protected ~EmptyFileStream() Flush() Clears buffers for this stream and causes any buffered data to be written to the file. public override void Flush() Exceptions FileNotFoundException Flush(bool) Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers. public override void Flush(bool flushToDisk) Parameters flushToDisk bool true to flush all intermediate file buffers; otherwise, false. Exceptions FileNotFoundException FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns Task A task that represents the asynchronous flush operation. Exceptions FileNotFoundException InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [Obsolete(\"This Remoting API is not supported and throws PlatformNotSupportedException.\", DiagnosticId = \"SYSLIB0010\", UrlFormat = \"https://aka.ms/dotnet-warnings/{0}\")] public override object InitializeLifetimeService() Returns object An object of type System.Runtime.Remoting.Lifetime.ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime property. Lock(long, long) Prevents other processes from reading from or writing to the FileStream. public override void Lock(long position, long length) Parameters position long The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). length long The range to be locked. Read(byte[], int, int) Reads a block of bytes from the stream and writes the data in a given buffer. public override int Read(byte[] array, int offset, int count) Parameters array byte[] When this method returns, contains the specified byte array with the values between offset and ( offset + count - 1 ) replaced by the bytes read from the current source. offset int The byte offset in array at which the read bytes will be placed. count int The maximum number of bytes to read. Returns int The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Exceptions FileNotFoundException Read(Span<byte>) Reads the specified buffer. public override int Read(Span<byte> buffer) Parameters buffer Span<byte> The buffer. Returns int Exceptions FileNotFoundException ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current file stream and writes them to a byte array beginning at a specified offset, advances the position within the file stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous read operation and wraps the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions FileNotFoundException ReadAsync(Memory<byte>, CancellationToken) Reads the asynchronous. public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters buffer Memory<byte> The buffer. cancellationToken CancellationToken The cancellation token. Returns ValueTask<int> Exceptions FileNotFoundException ReadByte() Reads a byte from the file and advances the read position one byte. public override int ReadByte() Returns int The byte, cast to an int, or -1 if the end of the stream has been reached. Exceptions FileNotFoundException Seek(long, SeekOrigin) Sets the current position of this stream to the given value. public override long Seek(long offset, SeekOrigin origin) Parameters offset long The point relative to origin from which to begin seeking. origin SeekOrigin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin. Returns long The new position in the stream. Exceptions FileNotFoundException SetLength(long) Sets the length of this stream to the given value. public override void SetLength(long value) Parameters value long The new length of the stream. Unlock(long, long) Allows access by other processes to all or part of a file that was previously locked. public override void Unlock(long position, long length) Parameters position long The beginning of the range to unlock. length long The range to be unlocked. Write(byte[], int, int) Writes a block of bytes to the file stream. public override void Write(byte[] array, int offset, int count) Parameters array byte[] The buffer containing data to write to the stream. offset int The zero-based byte offset in array from which to begin copying bytes to the stream. count int The maximum number of bytes to write. Exceptions FileNotFoundException Write(ReadOnlySpan<byte>) Writes the specified buffer. public override void Write(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> The buffer. Exceptions FileNotFoundException WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns Task A task that represents the asynchronous write operation. Exceptions FileNotFoundException WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Writes the asynchronous. public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters buffer ReadOnlyMemory<byte> The buffer. cancellationToken CancellationToken The cancellation token. Returns ValueTask Exceptions FileNotFoundException WriteByte(byte) Writes a byte to the current position in the file stream. public override void WriteByte(byte value) Parameters value byte A byte to write to the stream. Exceptions FileNotFoundException See Also FileStream"
  },
  "api/Mecha.Core.Generator.Helpers.EmptyHttpClient.html": {
    "href": "api/Mecha.Core.Generator.Helpers.EmptyHttpClient.html",
    "title": "Class EmptyHttpClient | Mecha API Reference",
    "summary": "Class EmptyHttpClient Namespace Mecha.Core.Generator.Helpers Assembly Mecha.Core.dll Empty HTTP Client public class EmptyHttpClient : HttpClient, IDisposable Inheritance object HttpMessageInvoker HttpClient EmptyHttpClient Implements IDisposable Inherited Members HttpClient.CancelPendingRequests() HttpClient.DeleteAsync(string) HttpClient.DeleteAsync(string, CancellationToken) HttpClient.DeleteAsync(Uri) HttpClient.DeleteAsync(Uri, CancellationToken) HttpClient.Dispose(bool) HttpClient.GetAsync(string) HttpClient.GetAsync(string, HttpCompletionOption) HttpClient.GetAsync(string, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(string, CancellationToken) HttpClient.GetAsync(Uri) HttpClient.GetAsync(Uri, HttpCompletionOption) HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(Uri, CancellationToken) HttpClient.GetByteArrayAsync(string) HttpClient.GetByteArrayAsync(string, CancellationToken) HttpClient.GetByteArrayAsync(Uri) HttpClient.GetByteArrayAsync(Uri, CancellationToken) HttpClient.GetStreamAsync(string) HttpClient.GetStreamAsync(string, CancellationToken) HttpClient.GetStreamAsync(Uri) HttpClient.GetStreamAsync(Uri, CancellationToken) HttpClient.GetStringAsync(string) HttpClient.GetStringAsync(string, CancellationToken) HttpClient.GetStringAsync(Uri) HttpClient.GetStringAsync(Uri, CancellationToken) HttpClient.PatchAsync(string, HttpContent) HttpClient.PatchAsync(string, HttpContent, CancellationToken) HttpClient.PatchAsync(Uri, HttpContent) HttpClient.PatchAsync(Uri, HttpContent, CancellationToken) HttpClient.PostAsync(string, HttpContent) HttpClient.PostAsync(string, HttpContent, CancellationToken) HttpClient.PostAsync(Uri, HttpContent) HttpClient.PostAsync(Uri, HttpContent, CancellationToken) HttpClient.PutAsync(string, HttpContent) HttpClient.PutAsync(string, HttpContent, CancellationToken) HttpClient.PutAsync(Uri, HttpContent) HttpClient.PutAsync(Uri, HttpContent, CancellationToken) HttpClient.Send(HttpRequestMessage) HttpClient.Send(HttpRequestMessage, HttpCompletionOption) HttpClient.Send(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.Send(HttpRequestMessage, CancellationToken) HttpClient.SendAsync(HttpRequestMessage) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.SendAsync(HttpRequestMessage, CancellationToken) HttpClient.BaseAddress HttpClient.DefaultProxy HttpClient.DefaultRequestHeaders HttpClient.DefaultRequestVersion HttpClient.DefaultVersionPolicy HttpClient.MaxResponseContentBufferSize HttpClient.Timeout HttpMessageInvoker.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors EmptyHttpClient(Random) Initializes a new instance of the EmptyHttpClient class. public EmptyHttpClient(Random random) Parameters random Random The random. See Also HttpClient"
  },
  "api/Mecha.Core.Generator.Helpers.EmptyStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.EmptyStream.html",
    "title": "Class EmptyStream | Mecha API Reference",
    "summary": "Class EmptyStream Namespace Mecha.Core.Generator.Helpers Assembly Mecha.Core.dll Empty stream (does nothing) public class EmptyStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream EmptyStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors EmptyStream() Initializes a new instance of the EmptyStream class. public EmptyStream() Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool CanTimeout Gets a value that determines whether the current stream can time out. public override bool CanTimeout { get; } Property Value bool CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. public override int ReadTimeout { get; set; } Property Value int WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. public override int WriteTimeout { get; set; } Property Value int Methods BeginRead(byte[], int, int, AsyncCallback, object) Begins an asynchronous read operation. (Consider using ReadAsync(byte[], int, int) instead.) public override IAsyncResult? BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters buffer byte[] The buffer to read the data into. offset int The byte offset in buffer at which to begin writing data read from the stream. count int The maximum number of bytes to read. callback AsyncCallback An optional asynchronous callback, to be called when the read is complete. state object A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns IAsyncResult An IAsyncResult that represents the asynchronous read, which could still be pending. BeginWrite(byte[], int, int, AsyncCallback, object) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) public override IAsyncResult? BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters buffer byte[] The buffer to write data from. offset int The byte offset in buffer from which to begin writing. count int The maximum number of bytes to write. callback AsyncCallback An optional asynchronous callback, to be called when the write is complete. state object A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. public override void Close() CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. public override void CopyTo(Stream destination, int bufferSize) Parameters destination Stream The stream to which the contents of the current stream will be copied. bufferSize int The size of the buffer. This value must be greater than zero. The default size is 81920. CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters destination Stream The stream to which the contents of the current stream will be copied. bufferSize int The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous copy operation. CreateWaitHandle() Allocates a WaitHandle object. [Obsolete(\"Reasons\")] protected override WaitHandle? CreateWaitHandle() Returns WaitHandle A reference to the allocated WaitHandle. EndRead(IAsyncResult) Waits for the pending asynchronous read to complete. (Consider using ReadAsync(byte[], int, int) instead.) public override int EndRead(IAsyncResult asyncResult) Parameters asyncResult IAsyncResult The reference to the pending asynchronous request to finish. Returns int The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available. EndWrite(IAsyncResult) Ends an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) public override void EndWrite(IAsyncResult asyncResult) Parameters asyncResult IAsyncResult A reference to the outstanding asynchronous I/O request. Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous flush operation. InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. [Obsolete(\"This Remoting API is not supported and throws PlatformNotSupportedException.\", DiagnosticId = \"SYSLIB0010\", UrlFormat = \"https://aka.ms/dotnet-warnings/{0}\")] public override object? InitializeLifetimeService() Returns object An object of type System.Runtime.Remoting.Lifetime.ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime property. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions EndOfStreamException Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(Span<byte> buffer) Parameters buffer Span<byte> A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task<int> A task that represents the asynchronous read operation. The value of the parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters buffer Memory<byte> The region of memory to write the data into. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or it can be 0 (zero) if the end of the stream has been reached. ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. public override int ReadByte() Returns int The unsigned byte cast to an Int32, or -1 if at the end of the stream. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions EndOfStreamException SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> A region of memory. This method copies the contents of this region to the current stream. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns Task A task that represents the asynchronous write operation. WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters buffer ReadOnlyMemory<byte> The region of memory to write data from. cancellationToken CancellationToken The token to monitor for cancellation requests. The default value is None. Returns ValueTask A task that represents the asynchronous write operation. WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. public override void WriteByte(byte value) Parameters value byte The byte to write to the stream. See Also Stream"
  },
  "api/Mecha.Core.Generator.Helpers.FaultyFileStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.FaultyFileStream.html",
    "title": "Class FaultyFileStream | Mecha API Reference",
    "summary": "Class FaultyFileStream Namespace Mecha.Core.Generator.Helpers Assembly Mecha.Core.dll Faulty file stream public class FaultyFileStream : FileStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream FileStream FaultyFileStream Implements IAsyncDisposable IDisposable Inherited Members FileStream.Dispose(bool) FileStream.DisposeAsync() FileStream.Lock(long, long) FileStream.SetLength(long) FileStream.Unlock(long, long) FileStream.CanRead FileStream.CanSeek FileStream.CanWrite FileStream.Handle FileStream.IsAsync FileStream.Length FileStream.Name FileStream.Position FileStream.SafeFileHandle Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors FaultyFileStream() Initializes a new instance of the FaultyFileStream class. public FaultyFileStream() Methods BeginRead(byte[], int, int, AsyncCallback, object) Begins an asynchronous read operation. Consider using ReadAsync(byte[], int, int, CancellationToken) instead. public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback callback, object state) Parameters array byte[] The buffer to read data into. offset int The byte offset in array at which to begin reading. numBytes int The maximum number of bytes to read. callback AsyncCallback The method to be called when the asynchronous read operation is completed. state object A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns IAsyncResult An object that references the asynchronous read. Exceptions FileNotFoundException BeginWrite(byte[], int, int, AsyncCallback, object) Begins an asynchronous write operation. Consider using WriteAsync(byte[], int, int, CancellationToken) instead. public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback callback, object state) Parameters array byte[] The buffer containing data to write to the current stream. offset int The zero-based byte offset in array at which to begin copying bytes to the current stream. numBytes int The maximum number of bytes to write. callback AsyncCallback The method to be called when the asynchronous write operation is completed. state object A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns IAsyncResult An object that references the asynchronous write. Exceptions EndOfStreamException Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. public override void Close() Exceptions EndOfStreamException CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. public override void CopyTo(Stream destination, int bufferSize) Parameters destination Stream The stream to which the contents of the current stream will be copied. bufferSize int The size of the buffer. This value must be greater than zero. The default size is 81920. Exceptions EndOfStreamException CopyToAsync(Stream, int, CancellationToken) Copies to asynchronous. public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters destination Stream The destination. bufferSize int Size of the buffer. cancellationToken CancellationToken The cancellation token. Returns Task Exceptions EndOfStreamException EndRead(IAsyncResult) Waits for the pending asynchronous read operation to complete. (Consider using ReadAsync(byte[], int, int, CancellationToken) instead.) public override int EndRead(IAsyncResult asyncResult) Parameters asyncResult IAsyncResult The reference to the pending asynchronous request to wait for. Returns int The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available. Exceptions FileNotFoundException EndWrite(IAsyncResult) Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using WriteAsync(byte[], int, int, CancellationToken) instead.) public override void EndWrite(IAsyncResult asyncResult) Parameters asyncResult IAsyncResult The pending asynchronous I/O request. Exceptions FileNotFoundException ~FaultyFileStream() Finalizes an instance of the FaultyFileStream class. protected ~FaultyFileStream() Flush() Clears buffers for this stream and causes any buffered data to be written to the file. public override void Flush() Exceptions FileNotFoundException Flush(bool) Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers. public override void Flush(bool flushToDisk) Parameters flushToDisk bool true to flush all intermediate file buffers; otherwise, false. Exceptions FileNotFoundException FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken The token to monitor for cancellation requests. Returns Task A task that represents the asynchronous flush operation. Exceptions FileNotFoundException Read(byte[], int, int) Reads a block of bytes from the stream and writes the data in a given buffer. public override int Read(byte[] array, int offset, int count) Parameters array byte[] When this method returns, contains the specified byte array with the values between offset and ( offset + count - 1 ) replaced by the bytes read from the current source. offset int The byte offset in array at which the read bytes will be placed. count int The maximum number of bytes to read. Returns int The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Exceptions FileNotFoundException Read(Span<byte>) Reads the specified buffer. public override int Read(Span<byte> buffer) Parameters buffer Span<byte> The buffer. Returns int Exceptions FileNotFoundException ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current file stream and writes them to a byte array beginning at a specified offset, advances the position within the file stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns Task<int> A task that represents the asynchronous read operation and wraps the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions FileNotFoundException ReadAsync(Memory<byte>, CancellationToken) Reads the asynchronous. public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters buffer Memory<byte> The buffer. cancellationToken CancellationToken The cancellation token. Returns ValueTask<int> Exceptions FileNotFoundException ReadByte() Reads a byte from the file and advances the read position one byte. public override int ReadByte() Returns int The byte, cast to an int, or -1 if the end of the stream has been reached. Exceptions FileNotFoundException Seek(long, SeekOrigin) Sets the current position of this stream to the given value. public override long Seek(long offset, SeekOrigin origin) Parameters offset long The point relative to origin from which to begin seeking. origin SeekOrigin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin. Returns long The new position in the stream. Exceptions FileNotFoundException Write(byte[], int, int) Writes a block of bytes to the file stream. public override void Write(byte[] array, int offset, int count) Parameters array byte[] The buffer containing data to write to the stream. offset int The zero-based byte offset in array from which to begin copying bytes to the stream. count int The maximum number of bytes to write. Exceptions FileNotFoundException Write(ReadOnlySpan<byte>) Writes the specified buffer. public override void Write(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> The buffer. Exceptions FileNotFoundException WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancellationToken CancellationToken The token to monitor for cancellation requests. Returns Task A task that represents the asynchronous write operation. Exceptions FileNotFoundException WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Writes the asynchronous. public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters buffer ReadOnlyMemory<byte> The buffer. cancellationToken CancellationToken The cancellation token. Returns ValueTask Exceptions FileNotFoundException WriteByte(byte) Writes a byte to the current position in the file stream. public override void WriteByte(byte value) Parameters value byte A byte to write to the stream. Exceptions FileNotFoundException See Also FileStream"
  },
  "api/Mecha.Core.Generator.Helpers.FaultyHttpClient.html": {
    "href": "api/Mecha.Core.Generator.Helpers.FaultyHttpClient.html",
    "title": "Class FaultyHttpClient | Mecha API Reference",
    "summary": "Class FaultyHttpClient Namespace Mecha.Core.Generator.Helpers Assembly Mecha.Core.dll Faulty HTTP Client public class FaultyHttpClient : HttpClient, IDisposable Inheritance object HttpMessageInvoker HttpClient FaultyHttpClient Implements IDisposable Inherited Members HttpClient.CancelPendingRequests() HttpClient.DeleteAsync(string) HttpClient.DeleteAsync(string, CancellationToken) HttpClient.DeleteAsync(Uri) HttpClient.DeleteAsync(Uri, CancellationToken) HttpClient.Dispose(bool) HttpClient.GetAsync(string) HttpClient.GetAsync(string, HttpCompletionOption) HttpClient.GetAsync(string, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(string, CancellationToken) HttpClient.GetAsync(Uri) HttpClient.GetAsync(Uri, HttpCompletionOption) HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(Uri, CancellationToken) HttpClient.GetByteArrayAsync(string) HttpClient.GetByteArrayAsync(string, CancellationToken) HttpClient.GetByteArrayAsync(Uri) HttpClient.GetByteArrayAsync(Uri, CancellationToken) HttpClient.GetStreamAsync(string) HttpClient.GetStreamAsync(string, CancellationToken) HttpClient.GetStreamAsync(Uri) HttpClient.GetStreamAsync(Uri, CancellationToken) HttpClient.GetStringAsync(string) HttpClient.GetStringAsync(string, CancellationToken) HttpClient.GetStringAsync(Uri) HttpClient.GetStringAsync(Uri, CancellationToken) HttpClient.PatchAsync(string, HttpContent) HttpClient.PatchAsync(string, HttpContent, CancellationToken) HttpClient.PatchAsync(Uri, HttpContent) HttpClient.PatchAsync(Uri, HttpContent, CancellationToken) HttpClient.PostAsync(string, HttpContent) HttpClient.PostAsync(string, HttpContent, CancellationToken) HttpClient.PostAsync(Uri, HttpContent) HttpClient.PostAsync(Uri, HttpContent, CancellationToken) HttpClient.PutAsync(string, HttpContent) HttpClient.PutAsync(string, HttpContent, CancellationToken) HttpClient.PutAsync(Uri, HttpContent) HttpClient.PutAsync(Uri, HttpContent, CancellationToken) HttpClient.Send(HttpRequestMessage) HttpClient.Send(HttpRequestMessage, HttpCompletionOption) HttpClient.Send(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.Send(HttpRequestMessage, CancellationToken) HttpClient.SendAsync(HttpRequestMessage) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.BaseAddress HttpClient.DefaultProxy HttpClient.DefaultRequestHeaders HttpClient.DefaultRequestVersion HttpClient.DefaultVersionPolicy HttpClient.MaxResponseContentBufferSize HttpClient.Timeout HttpMessageInvoker.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors FaultyHttpClient() Initializes a new instance of the FaultyHttpClient class. public FaultyHttpClient() Methods SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage The HTTP request message to send. cancellationToken CancellationToken The cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions HttpRequestException Website not accessible See Also HttpClient"
  },
  "api/Mecha.Core.Generator.Helpers.FaultyStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.FaultyStream.html",
    "title": "Class FaultyStream | Mecha API Reference",
    "summary": "Class FaultyStream Namespace Mecha.Core.Generator.Helpers Assembly Mecha.Core.dll Stream that throws faults public class FaultyStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream FaultyStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadByte() Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long Methods Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions EndOfStreamException Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions EndOfStreamException Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions EndOfStreamException SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions EndOfStreamException Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions EndOfStreamException See Also Stream"
  },
  "api/Mecha.Core.Generator.Helpers.html": {
    "href": "api/Mecha.Core.Generator.Helpers.html",
    "title": "Namespace Mecha.Core.Generator.Helpers | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Generator.Helpers Classes EmptyFileStream Empty file stream EmptyHttpClient Empty HTTP Client EmptyStream Empty stream (does nothing) FaultyFileStream Faulty file stream FaultyHttpClient Faulty HTTP Client FaultyStream Stream that throws faults"
  },
  "api/Mecha.Core.Generator.Interfaces.IGenerator.html": {
    "href": "api/Mecha.Core.Generator.Interfaces.IGenerator.html",
    "title": "Interface IGenerator | Mecha API Reference",
    "summary": "Interface IGenerator Namespace Mecha.Core.Generator.Interfaces Assembly Mecha.Core.dll Generator interface. public interface IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Gets the order. int Order { get; } Property Value int The order. Methods CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. bool CanGenerate(ParameterInfo? parameter) Parameters parameter ParameterInfo The parameter. Returns bool true if this instance can generate the specified parameter; otherwise, false. Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. ParameterValue? Next(ParameterInfo? parameter, object? min, object? max) Parameters parameter ParameterInfo The parameter. min object The minimum. max object The maximum. Returns ParameterValue The next object."
  },
  "api/Mecha.Core.Generator.Interfaces.html": {
    "href": "api/Mecha.Core.Generator.Interfaces.html",
    "title": "Namespace Mecha.Core.Generator.Interfaces | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Generator.Interfaces Interfaces IGenerator Generator interface."
  },
  "api/Mecha.Core.Generator.ParameterValue.html": {
    "href": "api/Mecha.Core.Generator.ParameterValue.html",
    "title": "Class ParameterValue | Mecha API Reference",
    "summary": "Class ParameterValue Namespace Mecha.Core.Generator Assembly Mecha.Core.dll Parameter data class public record ParameterValue : IEquatable<ParameterValue> Inheritance object ParameterValue Implements IEquatable<ParameterValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors ParameterValue(string, object?) Parameter data class public ParameterValue(string CreatedBy, object? Value) Parameters CreatedBy string Created by Value object Value Properties CreatedBy Created by public string CreatedBy { get; init; } Property Value string Value Value public object? Value { get; init; } Property Value object"
  },
  "api/Mecha.Core.Generator.ParameterValues.html": {
    "href": "api/Mecha.Core.Generator.ParameterValues.html",
    "title": "Class ParameterValues | Mecha API Reference",
    "summary": "Class ParameterValues Namespace Mecha.Core.Generator Assembly Mecha.Core.dll Parameter values public class ParameterValues Inheritance object ParameterValues Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors ParameterValues(ParameterInfo) Initializes a new instance of the ParameterValues class. public ParameterValues(ParameterInfo parameter) Parameters parameter ParameterInfo The parameter. Properties GeneratedValues Gets the generated values. public List<ParameterValue> GeneratedValues { get; } Property Value List<ParameterValue> The generated values. Parameter Gets or sets the parameter. public ParameterInfo? Parameter { get; set; } Property Value ParameterInfo The parameter. Methods AddValue(ParameterValue?) Adds the value specified if it is valid. public void AddValue(ParameterValue? value) Parameters value ParameterValue The value."
  },
  "api/Mecha.Core.Generator.html": {
    "href": "api/Mecha.Core.Generator.html",
    "title": "Namespace Mecha.Core.Generator | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Generator Classes GeneratorManager Generator manager ParameterValue Parameter data class ParameterValues Parameter values"
  },
  "api/Mecha.Core.Mech.html": {
    "href": "api/Mecha.Core.Mech.html",
    "title": "Class Mech | Mecha API Reference",
    "summary": "Class Mech Namespace Mecha.Core Assembly Mecha.Core.dll Main class for breaking the public class Mech Inheritance object Mech Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors Mech(GeneratorManager, DataManager, TestRunnerManager, Random, ShrinkerManager, MutatorManager) Initializes a new instance of the Mech class. public Mech(GeneratorManager generatorManager, DataManager dataManager, TestRunnerManager testRunnerManager, Random random, ShrinkerManager shrinker, MutatorManager mutator) Parameters generatorManager GeneratorManager The generator manager. dataManager DataManager The data manager. testRunnerManager TestRunnerManager The test runner manager. random Random The random. shrinker ShrinkerManager The shrinker. mutator MutatorManager The mutator. Properties DataManager Gets the data manager. public DataManager DataManager { get; } Property Value DataManager The data manager. Default Gets the default. public static Mech? Default { get; } Property Value Mech The default. GeneratorManager Gets the generator manager. public GeneratorManager GeneratorManager { get; } Property Value GeneratorManager The generator manager. Mutator Gets the mutator. public MutatorManager? Mutator { get; } Property Value MutatorManager The mutator. Random Gets the random. public Random Random { get; } Property Value Random The random. Shrinker Gets the shrinker. public ShrinkerManager Shrinker { get; } Property Value ShrinkerManager The shrinker. TestRunnerManager Gets the test runner manager. public TestRunnerManager TestRunnerManager { get; } Property Value TestRunnerManager The test runner manager. Methods BreakAsync(Action, Options?) Breaks the action. public static Task BreakAsync(Action action, Options? options = null) Parameters action Action The action. options Options The options. Returns Task BreakAsync(MethodInfo, object?, Options?) Breaks the method. public static Task BreakAsync(MethodInfo method, object? target, Options? options = null) Parameters method MethodInfo The method. target object The target. options Options The options. Returns Task BreakAsync(Type, Options?) Finds the methods of the class type specified and tries to break them. public static Task BreakAsync(Type classType, Options? options = null) Parameters classType Type Type of the class. options Options The options. Returns Task The async task. BreakAsync<TClass>(Options?) Finds the methods of the class type specified and tries to break them. public static Task BreakAsync<TClass>(Options? options = null) Parameters options Options Returns Task The async task. Type Parameters TClass The type of the class. BreakAsync<TValue1>(Action<TValue1>, Options?) Breaks the action. public static Task BreakAsync<TValue1>(Action<TValue1> action, Options? options = null) Parameters action Action<TValue1> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. BreakAsync<TClass>(TClass, Options?) Breaks the specified target. public static Task BreakAsync<TClass>(TClass target, Options? options = null) Parameters target TClass The target. options Options The options. Returns Task Type Parameters TClass The type of the class. Exceptions AggregateException BreakAsync<TValue1, TValue2>(Action<TValue1, TValue2>, Options?) Breaks the action. public static Task BreakAsync<TValue1, TValue2>(Action<TValue1, TValue2> action, Options? options = null) Parameters action Action<TValue1, TValue2> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. TValue2 The type of the value2. BreakAsync<TValue1, TValue2, TValue3>(Action<TValue1, TValue2, TValue3>, Options?) Breaks the action. public static Task BreakAsync<TValue1, TValue2, TValue3>(Action<TValue1, TValue2, TValue3> action, Options? options = null) Parameters action Action<TValue1, TValue2, TValue3> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. BreakAsync<TValue1, TValue2, TValue3, TValue4>(Action<TValue1, TValue2, TValue3, TValue4>, Options?) Breaks the action. public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4>(Action<TValue1, TValue2, TValue3, TValue4> action, Options? options = null) Parameters action Action<TValue1, TValue2, TValue3, TValue4> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(Action<TValue1, TValue2, TValue3, TValue4, TValue5>, Options?) Breaks the action. public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(Action<TValue1, TValue2, TValue3, TValue4, TValue5> action, Options? options = null) Parameters action Action<TValue1, TValue2, TValue3, TValue4, TValue5> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. TValue5 The type of the value5. BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>, Options?) Breaks the action. public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> action, Options? options = null) Parameters action Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. TValue5 The type of the value5. TValue6 The type of the value6. BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>, Options?) Breaks the action. public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> action, Options? options = null) Parameters action Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> The action. options Options The options. Returns Task Type Parameters TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. TValue5 The type of the value5. TValue6 The type of the value6. TValue7 The type of the value7. RunAsync(MethodInfo?, object?, Options?) Runs the specified method. public Task<Result> RunAsync(MethodInfo? runMethod, object? target, Options? options) Parameters runMethod MethodInfo The run method. target object The target. options Options The options. Returns Task<Result> The result"
  },
  "api/Mecha.Core.Modules.CanisterModule.html": {
    "href": "api/Mecha.Core.Modules.CanisterModule.html",
    "title": "Class CanisterModule | Mecha API Reference",
    "summary": "Class CanisterModule Namespace Mecha.Core.Modules Assembly Mecha.Core.dll Canister module public class CanisterModule : IModule Inheritance object CanisterModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Order Order to run this in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module using the bootstrapper public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/Mecha.Core.Modules.html": {
    "href": "api/Mecha.Core.Modules.html",
    "title": "Namespace Mecha.Core.Modules | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Modules Classes CanisterModule Canister module"
  },
  "api/Mecha.Core.Mutator.Defaults.StringMutator.html": {
    "href": "api/Mecha.Core.Mutator.Defaults.StringMutator.html",
    "title": "Class StringMutator | Mecha API Reference",
    "summary": "Class StringMutator Namespace Mecha.Core.Mutator.Defaults Assembly Mecha.Core.dll String mutator public class StringMutator : IMutator Inheritance object StringMutator Implements IMutator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors StringMutator(Random) Initializes a new instance of the StringMutator class. public StringMutator(Random random) Parameters random Random The random. Methods CanMutate(object?) Determines whether this instance can mutate the specified value. public bool CanMutate(object? value) Parameters value object The value. Returns bool true if this instance can mutate the specified value; otherwise, false. Mutate(object?) Mutates the specified value. public object? Mutate(object? value) Parameters value object The value. Returns object The mutated value. See Also IMutator"
  },
  "api/Mecha.Core.Mutator.Defaults.html": {
    "href": "api/Mecha.Core.Mutator.Defaults.html",
    "title": "Namespace Mecha.Core.Mutator.Defaults | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Mutator.Defaults Classes StringMutator String mutator"
  },
  "api/Mecha.Core.Mutator.Interfaces.IMutator.html": {
    "href": "api/Mecha.Core.Mutator.Interfaces.IMutator.html",
    "title": "Interface IMutator | Mecha API Reference",
    "summary": "Interface IMutator Namespace Mecha.Core.Mutator.Interfaces Assembly Mecha.Core.dll Mutator interface public interface IMutator Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanMutate(object?) Determines whether this instance can mutate the specified value. bool CanMutate(object? value) Parameters value object The value. Returns bool true if this instance can mutate the specified value; otherwise, false. Mutate(object?) Mutates the specified value. object? Mutate(object? value) Parameters value object The value. Returns object The mutated value."
  },
  "api/Mecha.Core.Mutator.Interfaces.html": {
    "href": "api/Mecha.Core.Mutator.Interfaces.html",
    "title": "Namespace Mecha.Core.Mutator.Interfaces | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Mutator.Interfaces Interfaces IMutator Mutator interface"
  },
  "api/Mecha.Core.Mutator.MutatorManager.html": {
    "href": "api/Mecha.Core.Mutator.MutatorManager.html",
    "title": "Class MutatorManager | Mecha API Reference",
    "summary": "Class MutatorManager Namespace Mecha.Core.Mutator Assembly Mecha.Core.dll Mutator manager public class MutatorManager Inheritance object MutatorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors MutatorManager(IEnumerable<IMutator>) Initializes a new instance of the MutatorManager class. public MutatorManager(IEnumerable<IMutator> mutators) Parameters mutators IEnumerable<IMutator> The mutators. Methods Mutate(object?) Mutates the specified value. public object? Mutate(object? value) Parameters value object The value. Returns object The mutated value."
  },
  "api/Mecha.Core.Mutator.html": {
    "href": "api/Mecha.Core.Mutator.html",
    "title": "Namespace Mecha.Core.Mutator | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Mutator Classes MutatorManager Mutator manager"
  },
  "api/Mecha.Core.Options.html": {
    "href": "api/Mecha.Core.Options.html",
    "title": "Class Options | Mecha API Reference",
    "summary": "Class Options Namespace Mecha.Core Assembly Mecha.Core.dll Options public class Options Inheritance object Options Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods OptionsExtensions.Initialize(Options?) UtilsExtensions.IsInfinite(object?) Properties Default Gets the default. public static Options Default { get; } Property Value Options The default. DiscoverInheritedMethods Gets or sets a value indicating whether [discover inherited methods]. public bool DiscoverInheritedMethods { get; set; } Property Value bool true if [discover inherited methods]; otherwise, false. ExceptionHandlers Gets or sets the exceptions to ignore. public ExceptionHandler? ExceptionHandlers { get; set; } Property Value ExceptionHandler The exceptions to ignore. GenerationCount Gets the number of generated items to create. public int GenerationCount { get; set; } Property Value int The number of generated items to create. MaxDuration Gets the max duration to run the tests for. public int MaxDuration { get; set; } Property Value int The max duration to run the tests for. MaxMutationCount Gets or sets the maximum mutation count. public int MaxMutationCount { get; set; } Property Value int The maximum mutation count. MaxShrinkCount Gets or sets the maximum shrink count. public int MaxShrinkCount { get; set; } Property Value int The maximum shrink count. Verbose Gets or sets a value indicating whether this Options is verbose. public bool Verbose { get; set; } Property Value bool true if verbose; otherwise, false."
  },
  "api/Mecha.Core.OptionsExtensions.html": {
    "href": "api/Mecha.Core.OptionsExtensions.html",
    "title": "Class OptionsExtensions | Mecha API Reference",
    "summary": "Class OptionsExtensions Namespace Mecha.Core Assembly Mecha.Core.dll Options extensions public static class OptionsExtensions Inheritance object OptionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(Options?) Initializes the specified options. public static Options Initialize(this Options? options) Parameters options Options The options. Returns Options Options after being initialized."
  },
  "api/Mecha.Core.Runner.BaseClasses.RunnerBaseClass.html": {
    "href": "api/Mecha.Core.Runner.BaseClasses.RunnerBaseClass.html",
    "title": "Class RunnerBaseClass | Mecha API Reference",
    "summary": "Class RunnerBaseClass Namespace Mecha.Core.Runner.BaseClasses Assembly Mecha.Core.dll Runner base class public abstract class RunnerBaseClass : IRunner Inheritance object RunnerBaseClass Implements IRunner Derived DefaultRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Initializes a new instance of the RunnerBaseClass class. Constructors RunnerBaseClass(Random) Runner base class protected RunnerBaseClass(Random random) Parameters random Random Remarks Initializes a new instance of the RunnerBaseClass class. Properties Manager Gets or sets the manager. protected Mech? Manager { get; set; } Property Value Mech The manager. Random Gets the random. protected Random Random { get; } Property Value Random The random. Methods FinishRun(MethodInfo, object?, Options, List<RunResult>) Finishes the run and converts the list of runs to a finished result. protected abstract Result FinishRun(MethodInfo runMethod, object? target, Options options, List<RunResult> results) Parameters runMethod MethodInfo The run method. target object The target. options Options The options. results List<RunResult> The results. Returns Result The result for the run. GenerateArguments(MethodInfo, Options) Generates the arguments. protected ParameterValues[] GenerateArguments(MethodInfo methodInfo, Options options) Parameters methodInfo MethodInfo The method information. options Options The options. Returns ParameterValues[] The generated arguments. MutateAsync(List<RunResult>, Options) Attempts to mutate the successful runs asynchronously. protected Task<List<RunResult>> MutateAsync(List<RunResult> runs, Options options) Parameters runs List<RunResult> The runs. options Options The options. Returns Task<List<RunResult>> The resulting runs. ReloadTests(MethodInfo) Reloads the arguments. protected List<object?[]> ReloadTests(MethodInfo methodInfo) Parameters methodInfo MethodInfo The method information. Returns List<object[]> RunAsync(MethodInfo?, object?, Options) Runs the specified method on the target class. public Task<Result> RunAsync(MethodInfo? runMethod, object? target, Options options) Parameters runMethod MethodInfo The run method. target object The target. options Options The options. Returns Task<Result> The result. SaveArguments(MethodInfo, object?[]) Saves the arguments. protected void SaveArguments(MethodInfo method, object?[] data) Parameters method MethodInfo The method. data object[] The data. ShrinkAsync(List<RunResult>, Options) Shrinks this instance. protected Task<List<RunResult>> ShrinkAsync(List<RunResult> runs, Options options) Parameters runs List<RunResult> The runs. options Options The options. Returns Task<List<RunResult>> The shrunk run. StartRun(MethodInfo, object?, Options) Called at the start of the run. protected abstract void StartRun(MethodInfo runMethod, object? target, Options options) Parameters runMethod MethodInfo The run method. target object The target. options Options The options."
  },
  "api/Mecha.Core.Runner.BaseClasses.html": {
    "href": "api/Mecha.Core.Runner.BaseClasses.html",
    "title": "Namespace Mecha.Core.Runner.BaseClasses | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Runner.BaseClasses Classes RunnerBaseClass Runner base class"
  },
  "api/Mecha.Core.Runner.DefaultRunner.html": {
    "href": "api/Mecha.Core.Runner.DefaultRunner.html",
    "title": "Class DefaultRunner | Mecha API Reference",
    "summary": "Class DefaultRunner Namespace Mecha.Core.Runner Assembly Mecha.Core.dll Default runner public class DefaultRunner : RunnerBaseClass, IRunner Inheritance object RunnerBaseClass DefaultRunner Implements IRunner Inherited Members RunnerBaseClass.Manager RunnerBaseClass.Random RunnerBaseClass.RunAsync(MethodInfo, object, Options) RunnerBaseClass.GenerateArguments(MethodInfo, Options) RunnerBaseClass.MutateAsync(List<RunResult>, Options) RunnerBaseClass.ReloadTests(MethodInfo) RunnerBaseClass.SaveArguments(MethodInfo, object[]) RunnerBaseClass.ShrinkAsync(List<RunResult>, Options) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Initializes a new instance of the DefaultRunner class. Constructors DefaultRunner(Random) Default runner public DefaultRunner(Random random) Parameters random Random Remarks Initializes a new instance of the DefaultRunner class. See Also IRunner Methods FinishRun(MethodInfo, object?, Options, List<RunResult>) Finishes the run and converts the list of runs to a finished result. protected override Result FinishRun(MethodInfo runMethod, object? target, Options options, List<RunResult> results) Parameters runMethod MethodInfo The run method. target object The target. options Options The options. results List<RunResult> The results. Returns Result The result for the run. StartRun(MethodInfo, object?, Options) Called at the start of the run. protected override void StartRun(MethodInfo runMethod, object? target, Options options) Parameters runMethod MethodInfo The run method. target object The target. options Options The options. See Also IRunner"
  },
  "api/Mecha.Core.Runner.Helpers.MethodInvoker-1.html": {
    "href": "api/Mecha.Core.Runner.Helpers.MethodInvoker-1.html",
    "title": "Class MethodInvoker<TTarget> | Mecha API Reference",
    "summary": "Class MethodInvoker<TTarget> Namespace Mecha.Core.Runner.Helpers Assembly Mecha.Core.dll Method invoker public class MethodInvoker<TTarget> : IMethodInvoker Type Parameters TTarget Inheritance object MethodInvoker<TTarget> Implements IMethodInvoker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Remarks Method invoker constructor Constructors MethodInvoker(MethodInfo) Method invoker public MethodInvoker(MethodInfo method) Parameters method MethodInfo The method. Remarks Method invoker constructor Properties Method The method to invoke public MethodInfo? Method { get; set; } Property Value MethodInfo Methods Invoke(object?, object?[]) Invokes the method public object? Invoke(object? target, object?[] parameters) Parameters target object The target parameters object[] The parameters Returns object The result"
  },
  "api/Mecha.Core.Runner.Helpers.html": {
    "href": "api/Mecha.Core.Runner.Helpers.html",
    "title": "Namespace Mecha.Core.Runner.Helpers | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Runner.Helpers Classes MethodInvoker<TTarget> Method invoker"
  },
  "api/Mecha.Core.Runner.Interfaces.IMethodInvoker.html": {
    "href": "api/Mecha.Core.Runner.Interfaces.IMethodInvoker.html",
    "title": "Interface IMethodInvoker | Mecha API Reference",
    "summary": "Interface IMethodInvoker Namespace Mecha.Core.Runner.Interfaces Assembly Mecha.Core.dll Method invoker interface public interface IMethodInvoker Extension Methods UtilsExtensions.IsInfinite(object?) Properties Method The method information MethodInfo? Method { get; set; } Property Value MethodInfo Methods Invoke(object?, object?[]) Invokes the method specified. object? Invoke(object? target, object?[] parameters) Parameters target object The target object. Is null if the method is static. parameters object[] The parameters to pass to the method. Returns object The resulting object."
  },
  "api/Mecha.Core.Runner.Interfaces.IRunner.html": {
    "href": "api/Mecha.Core.Runner.Interfaces.IRunner.html",
    "title": "Interface IRunner | Mecha API Reference",
    "summary": "Interface IRunner Namespace Mecha.Core.Runner.Interfaces Assembly Mecha.Core.dll Test runner interface public interface IRunner Extension Methods UtilsExtensions.IsInfinite(object?) Methods RunAsync(MethodInfo?, object?, Options) Runs the specified method on the target class. Task<Result> RunAsync(MethodInfo? runMethod, object? target, Options options) Parameters runMethod MethodInfo The run method. target object The target. options Options The options. Returns Task<Result> The result."
  },
  "api/Mecha.Core.Runner.Interfaces.html": {
    "href": "api/Mecha.Core.Runner.Interfaces.html",
    "title": "Namespace Mecha.Core.Runner.Interfaces | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Runner.Interfaces Interfaces IMethodInvoker Method invoker interface IRunner Test runner interface"
  },
  "api/Mecha.Core.Runner.Parameter.html": {
    "href": "api/Mecha.Core.Runner.Parameter.html",
    "title": "Class Parameter | Mecha API Reference",
    "summary": "Class Parameter Namespace Mecha.Core.Runner Assembly Mecha.Core.dll Parameter value public class Parameter Inheritance object Parameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UtilsExtensions.IsInfinite(object?) Constructors Parameter(ParameterInfo, object?, string) Initializes a new instance of the Parameter class. public Parameter(ParameterInfo parameter, object? value, string createdBy) Parameters parameter ParameterInfo The parameter. value object The value. createdBy string Parameter generated by. Parameter(ParameterInfo, object?, string, int, int) Initializes a new instance of the Parameter class. public Parameter(ParameterInfo parameter, object? value, string createdBy, int shrinkCount, int mutationCount) Parameters parameter ParameterInfo The parameter. value object The value. createdBy string Parameter generated by. shrinkCount int The shrink count. mutationCount int The mutation count. Properties CreatedBy Get the generator that created the parameter value. public string CreatedBy { get; } Property Value string The generator. MutationCount Gets the mutate count. public int MutationCount { get; } Property Value int The mutate count. ParameterInfo Gets or sets the name. public ParameterInfo ParameterInfo { get; } Property Value ParameterInfo The name. ShrinkCount Gets or sets the shrink count. public int ShrinkCount { get; } Property Value int The shrink count. Value Gets or sets the value. public object? Value { get; } Property Value object The value. Methods Copy() Copies this instance. public Parameter Copy() Returns Parameter Mutate(MutatorManager?, List<RunResult>) Mutates the parameter. public bool Mutate(MutatorManager? mutator, List<RunResult> results) Parameters mutator MutatorManager The mutator. results List<RunResult> The results. Returns bool True if it is mutated, false otherwise. Same(Parameter) Determines if the values are the same public bool Same(Parameter value) Parameters value Parameter The value. Returns bool True if they are, false otherwise Shrink(ShrinkerManager?, List<RunResult>) Shrinks the specified shrinker. public bool Shrink(ShrinkerManager? shrinker, List<RunResult> results) Parameters shrinker ShrinkerManager The shrinker. results List<RunResult> The results. Returns bool ToString() Converts to string. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Mecha.Core.Runner.Result.html": {
    "href": "api/Mecha.Core.Runner.Result.html",
    "title": "Class Result | Mecha API Reference",
    "summary": "Class Result Namespace Mecha.Core.Runner Assembly Mecha.Core.dll Result data holder public class Result Inheritance object Result Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties Exception Gets or sets the exception. public Exception? Exception { get; set; } Property Value Exception The exception. ExecutionTime Gets or sets the execution time. public decimal ExecutionTime { get; set; } Property Value decimal The execution time. Output Gets or sets the output. public string? Output { get; set; } Property Value string The output. Passed Gets or sets a value indicating whether this Result is passed. public bool Passed { get; set; } Property Value bool true if passed; otherwise, false. Skipped Gets the skipped. public static Result Skipped { get; } Property Value Result The skipped."
  },
  "api/Mecha.Core.Runner.RunResult.html": {
    "href": "api/Mecha.Core.Runner.RunResult.html",
    "title": "Class RunResult | Mecha API Reference",
    "summary": "Class RunResult Namespace Mecha.Core.Runner Assembly Mecha.Core.dll Individual run result public class RunResult Inheritance object RunResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UtilsExtensions.IsInfinite(object?) Constructors RunResult(MethodInfo, object?, ParameterValue?[]) Initializes a new instance of the RunResult class. public RunResult(MethodInfo method, object? target, ParameterValue?[] parameterValues) Parameters method MethodInfo The method. target object The target parameterValues ParameterValue[] The parameter values. RunResult(MethodInfo, object?, object?[]) Initializes a new instance of the RunResult class. public RunResult(MethodInfo method, object? target, object?[] parameterValues) Parameters method MethodInfo The method. target object The target. parameterValues object[] The parameter values. Properties ElapsedTime Gets or sets the elapsed time. public decimal ElapsedTime { get; } Property Value decimal The elapsed time. Exception Gets or sets the exception. public Exception? Exception { get; } Property Value Exception The exception. Method Gets or sets the method. public MethodInfo Method { get; } Property Value MethodInfo The method. MutationCount Gets the mutation count. public int MutationCount { get; } Property Value int The mutation count. Parameters Gets or sets the parameters used. public Parameter[] Parameters { get; } Property Value Parameter[] The parameters used. ReturnedValue Gets or sets the returned value. public object? ReturnedValue { get; } Property Value object The returned value. ShrinkCount Gets or sets the shrink count. public int ShrinkCount { get; } Property Value int The shrink count. Target Gets or sets the target. public object? Target { get; } Property Value object The target. Methods Copy() Copies this instance. public RunResult Copy() Returns RunResult The copy. Mutate(MutatorManager?, List<RunResult>, Options) Mutates the specified mutator. public bool Mutate(MutatorManager? mutator, List<RunResult> results, Options options) Parameters mutator MutatorManager The mutator. results List<RunResult> The results. options Options The options. Returns bool True if it is mutated, false otherwise. RunAsync(Stopwatch, Options) Runs the specified timer. public Task<bool> RunAsync(Stopwatch timer, Options options) Parameters timer Stopwatch The timer. options Options The options. Returns Task<bool> True if it runs successfully, false otherwise. Same(RunResult) Determines if this is the same as another run result. public bool Same(RunResult runResult) Parameters runResult RunResult The run result. Returns bool True if they are the same, false otherwise. Shrink(ShrinkerManager?, List<RunResult>, Options) Shrinks the specified shrinker. public bool Shrink(ShrinkerManager? shrinker, List<RunResult> results, Options options) Parameters shrinker ShrinkerManager The shrinker. results List<RunResult> The results. options Options The options. Returns bool True if it is shrunk, false otherwise. ToString() Converts to string. public override string ToString() Returns string A string that represents this instance."
  },
  "api/Mecha.Core.Runner.TestRunnerManager.html": {
    "href": "api/Mecha.Core.Runner.TestRunnerManager.html",
    "title": "Class TestRunnerManager | Mecha API Reference",
    "summary": "Class TestRunnerManager Namespace Mecha.Core.Runner Assembly Mecha.Core.dll Test runner manager public class TestRunnerManager Inheritance object TestRunnerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors TestRunnerManager(IEnumerable<IRunner>) Initializes a new instance of the TestRunnerManager class. public TestRunnerManager(IEnumerable<IRunner> runners) Parameters runners IEnumerable<IRunner> The runners. Methods RunAsync(MethodInfo?, object?, Options) Runs the specified method information. public Task<Result> RunAsync(MethodInfo? methodInfo, object? target, Options options) Parameters methodInfo MethodInfo The method information. target object The target. options Options The options. Returns Task<Result> Results"
  },
  "api/Mecha.Core.Runner.html": {
    "href": "api/Mecha.Core.Runner.html",
    "title": "Namespace Mecha.Core.Runner | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Runner Classes DefaultRunner Default runner Parameter Parameter value Result Result data holder RunResult Individual run result TestRunnerManager Test runner manager"
  },
  "api/Mecha.Core.Shrinker.Defaults.ArrayShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.ArrayShrinker.html",
    "title": "Class ArrayShrinker | Mecha API Reference",
    "summary": "Class ArrayShrinker Namespace Mecha.Core.Shrinker.Defaults Assembly Mecha.Core.dll Array shrinker public class ArrayShrinker : IShrinker Inheritance object ArrayShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanShrink(object?) Determines whether this instance can shrink. public bool CanShrink(object? value) Parameters value object Returns bool true if this instance can shrink; otherwise, false. Shrink(object?) Shrinks the specified value. public object? Shrink(object? value) Parameters value object The value. Returns object See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.DictionaryShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.DictionaryShrinker.html",
    "title": "Class DictionaryShrinker | Mecha API Reference",
    "summary": "Class DictionaryShrinker Namespace Mecha.Core.Shrinker.Defaults Assembly Mecha.Core.dll List shrinker public class DictionaryShrinker : IShrinker Inheritance object DictionaryShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanShrink(object?) Determines whether this instance can shrink. public bool CanShrink(object? value) Parameters value object Returns bool true if this instance can shrink; otherwise, false. Shrink(object?) Shrinks the specified value. public object? Shrink(object? value) Parameters value object The value. Returns object See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.ListShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.ListShrinker.html",
    "title": "Class ListShrinker | Mecha API Reference",
    "summary": "Class ListShrinker Namespace Mecha.Core.Shrinker.Defaults Assembly Mecha.Core.dll List shrinker public class ListShrinker : IShrinker Inheritance object ListShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanShrink(object?) Determines whether this instance can shrink. public bool CanShrink(object? value) Parameters value object Returns bool true if this instance can shrink; otherwise, false. Shrink(object?) Shrinks the specified value. public object? Shrink(object? value) Parameters value object The value. Returns object See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.NumberShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.NumberShrinker.html",
    "title": "Class NumberShrinker | Mecha API Reference",
    "summary": "Class NumberShrinker Namespace Mecha.Core.Shrinker.Defaults Assembly Mecha.Core.dll Number shrinker public class NumberShrinker : IShrinker Inheritance object NumberShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanShrink(object?) Determines whether this instance can shrink. public bool CanShrink(object? value) Parameters value object Returns bool true if this instance can shrink; otherwise, false. Shrink(object?) Shrinks the specified value. public object? Shrink(object? value) Parameters value object The value. Returns object See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.StringShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.StringShrinker.html",
    "title": "Class StringShrinker | Mecha API Reference",
    "summary": "Class StringShrinker Namespace Mecha.Core.Shrinker.Defaults Assembly Mecha.Core.dll String shrinker public class StringShrinker : IShrinker Inheritance object StringShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanShrink(object?) Determines whether this instance can shrink. public bool CanShrink(object? value) Parameters value object Returns bool true if this instance can shrink; otherwise, false. Shrink(object?) Shrinks the specified value. public object? Shrink(object? value) Parameters value object The value. Returns object See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.html",
    "title": "Namespace Mecha.Core.Shrinker.Defaults | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Shrinker.Defaults Classes ArrayShrinker Array shrinker DictionaryShrinker List shrinker ListShrinker List shrinker NumberShrinker Number shrinker StringShrinker String shrinker"
  },
  "api/Mecha.Core.Shrinker.Interfaces.IShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Interfaces.IShrinker.html",
    "title": "Interface IShrinker | Mecha API Reference",
    "summary": "Interface IShrinker Namespace Mecha.Core.Shrinker.Interfaces Assembly Mecha.Core.dll Shrinker interface public interface IShrinker Extension Methods UtilsExtensions.IsInfinite(object?) Methods CanShrink(object?) Determines whether this instance can shrink. bool CanShrink(object? value) Parameters value object Returns bool true if this instance can shrink; otherwise, false. Shrink(object?) Shrinks the specified value. object? Shrink(object? value) Parameters value object The value. Returns object The \"shrunk\" value."
  },
  "api/Mecha.Core.Shrinker.Interfaces.html": {
    "href": "api/Mecha.Core.Shrinker.Interfaces.html",
    "title": "Namespace Mecha.Core.Shrinker.Interfaces | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Shrinker.Interfaces Interfaces IShrinker Shrinker interface"
  },
  "api/Mecha.Core.Shrinker.ShrinkerManager.html": {
    "href": "api/Mecha.Core.Shrinker.ShrinkerManager.html",
    "title": "Class ShrinkerManager | Mecha API Reference",
    "summary": "Class ShrinkerManager Namespace Mecha.Core.Shrinker Assembly Mecha.Core.dll Shrinker manager public class ShrinkerManager Inheritance object ShrinkerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors ShrinkerManager(IEnumerable<IShrinker>) Initializes a new instance of the ShrinkerManager class. public ShrinkerManager(IEnumerable<IShrinker> shrinkers) Parameters shrinkers IEnumerable<IShrinker> The shrinkers. Methods Shrink(object?) Shrinks the specified value. public object? Shrink(object? value) Parameters value object The value. Returns object The \"shrunk\" value"
  },
  "api/Mecha.Core.Shrinker.html": {
    "href": "api/Mecha.Core.Shrinker.html",
    "title": "Namespace Mecha.Core.Shrinker | Mecha API Reference",
    "summary": "Namespace Mecha.Core.Shrinker Classes ShrinkerManager Shrinker manager"
  },
  "api/Mecha.Core.html": {
    "href": "api/Mecha.Core.html",
    "title": "Namespace Mecha.Core | Mecha API Reference",
    "summary": "Namespace Mecha.Core Classes DoNotBreakAttribute Property attribute ExceptionHandler Exception handler Mech Main class for breaking the Options Options OptionsExtensions Options extensions"
  },
  "api/Mecha.xUnit.PropertyAttribute.html": {
    "href": "api/Mecha.xUnit.PropertyAttribute.html",
    "title": "Class PropertyAttribute | Mecha API Reference",
    "summary": "Class PropertyAttribute Namespace Mecha.xUnit Assembly Mecha.xUnit.dll Property attribute [XunitTestCaseDiscoverer(\"Mecha.xUnit.PropertyDiscoverer\", \"Mecha.xUnit\")] [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property, AllowMultiple = false)] public class PropertyAttribute : FactAttribute Inheritance object Attribute FactAttribute PropertyAttribute Inherited Members FactAttribute.DisplayName FactAttribute.Skip FactAttribute.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Properties GenerationCount Gets the number of randomly generated items to create. public int GenerationCount { get; set; } Property Value int The number of randomly generated items to create. MaxDuration Gets the max duration to run the tests for. public int MaxDuration { get; set; } Property Value int The max duration to run the tests for. MaxShrinkCount Gets or sets the maximum shrink count. public int MaxShrinkCount { get; set; } Property Value int The maximum shrink count. Verbose Gets or sets a value indicating whether this PropertyAttribute is verbose. public bool Verbose { get; set; } Property Value bool true if verbose; otherwise, false. See Also FactAttribute"
  },
  "api/Mecha.xUnit.PropertyDiscoverer.html": {
    "href": "api/Mecha.xUnit.PropertyDiscoverer.html",
    "title": "Class PropertyDiscoverer | Mecha API Reference",
    "summary": "Class PropertyDiscoverer Namespace Mecha.xUnit Assembly Mecha.xUnit.dll Property discoverer public class PropertyDiscoverer : IXunitTestCaseDiscoverer Inheritance object PropertyDiscoverer Implements IXunitTestCaseDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors PropertyDiscoverer() Initializes a new instance of the PropertyDiscoverer class. public PropertyDiscoverer() PropertyDiscoverer(IMessageSink?) Initializes a new instance of the PropertyDiscoverer class. public PropertyDiscoverer(IMessageSink? messageSink) Parameters messageSink IMessageSink The message sink. Properties MessageSink Gets the message sink. public IMessageSink? MessageSink { get; } Property Value IMessageSink The message sink. Methods Discover(ITestFrameworkDiscoveryOptions, ITestMethod, IAttributeInfo) Discover test cases from a test method. public IEnumerable<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod ITestMethod The test method the test cases belong to. factAttribute IAttributeInfo The fact attribute attached to the test method. Returns IEnumerable<IXunitTestCase> Returns zero or more test cases represented by the test method. See Also IXunitTestCaseDiscoverer"
  },
  "api/Mecha.xUnit.PropertyTestCase.html": {
    "href": "api/Mecha.xUnit.PropertyTestCase.html",
    "title": "Class PropertyTestCase | Mecha API Reference",
    "summary": "Class PropertyTestCase Namespace Mecha.xUnit Assembly Mecha.xUnit.dll Property test case public class PropertyTestCase : XunitTestCase, IDisposable, IXunitTestCase, ITestCase, IXunitSerializable Inheritance object LongLivedMarshalByRefObject TestMethodTestCase XunitTestCase PropertyTestCase Implements IDisposable IXunitTestCase ITestCase IXunitSerializable Inherited Members XunitTestCase.GetDisplayName(IAttributeInfo, string) XunitTestCase.GetSkipReason(IAttributeInfo) XunitTestCase.GetTimeout(IAttributeInfo) XunitTestCase.Initialize() XunitTestCase.Serialize(IXunitSerializationInfo) XunitTestCase.Deserialize(IXunitSerializationInfo) XunitTestCase.DiagnosticMessageSink XunitTestCase.Timeout TestMethodTestCase.Dispose() TestMethodTestCase.EnsureInitialized() TestMethodTestCase.GetUniqueID() TestMethodTestCase.BaseDisplayName TestMethodTestCase.DefaultMethodDisplay TestMethodTestCase.DefaultMethodDisplayOptions TestMethodTestCase.DisplayName TestMethodTestCase.InitializationException TestMethodTestCase.Method TestMethodTestCase.MethodGenericTypes TestMethodTestCase.SkipReason TestMethodTestCase.SourceInformation TestMethodTestCase.TestMethod TestMethodTestCase.TestMethodArguments TestMethodTestCase.Traits TestMethodTestCase.UniqueID LongLivedMarshalByRefObject.DisconnectAll() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?) Constructors PropertyTestCase() Initializes a new instance of the PropertyTestCase class. public PropertyTestCase() PropertyTestCase(IMessageSink?, TestMethodDisplay, TestMethodDisplayOptions, ITestMethod?, object[]?) Initializes a new instance of the PropertyTestCase class. public PropertyTestCase(IMessageSink? diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions methodDisplayOptions, ITestMethod? testMethod, object[]? testMethodArguments = null) Parameters diagnosticMessageSink IMessageSink The message sink used to send diagnostic messages defaultMethodDisplay TestMethodDisplay Default method display to use (when not customized). methodDisplayOptions TestMethodDisplayOptions The method display options. testMethod ITestMethod The test method this test case belongs to. testMethodArguments object[] The arguments for the test method. Methods Init(IMessageBus, CancellationTokenSource) Initializes the specified output helper. public void Init(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource) Parameters messageBus IMessageBus cancellationTokenSource CancellationTokenSource RunAsync(IMessageSink, IMessageBus, object[], ExceptionAggregator, CancellationTokenSource) Runs the asynchronous. public override Task<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters diagnosticMessageSink IMessageSink The diagnostic message sink. messageBus IMessageBus The message bus. constructorArguments object[] The constructor arguments. aggregator ExceptionAggregator The aggregator. cancellationTokenSource CancellationTokenSource The cancellation token source. Returns Task<RunSummary> See Also XunitTestCase"
  },
  "api/Mecha.xUnit.html": {
    "href": "api/Mecha.xUnit.html",
    "title": "Namespace Mecha.xUnit | Mecha API Reference",
    "summary": "Namespace Mecha.xUnit Classes PropertyAttribute Property attribute PropertyDiscoverer Property discoverer PropertyTestCase Property test case"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Mecha API Reference",
    "summary": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Mecha API Reference",
    "summary": "Code public async Task BreakAsyncStaticTestExtensions() { // Arrange Type TestType = typeof(StaticTestExtensions);"
  },
  "index.html": {
    "href": "index.html",
    "title": "The Code and What It's Doing | Mecha API Reference",
    "summary": "I try to make idiot proof software but the world keeps making better idiots. Or at least that's how it seems to us much of the time. You post a new application feature and the user's find a way to break it. In reality it's because we didn't think of an edge case that they found. I mean who can possibly think up all of these possibilities? A cracked out squirrel? Perhaps a raccoon with ADHD? Neither really work out in the long run as eventually they rise up against society to overthrow it. They're trained with computers at that point so there is no stopping them. And personally I'm too lazy to do this myself so I guess that leaves writing some code to do it, but thankfully I've already done that for you. Mecha is a library to automatically test classes with the ultimate goal being to find ways to break the code. It can help with unit testing, security testing via data fuzzing, testing for concurrency issues, and check for fault tolerance. With one line of code, you can test every method in a class automatically. Best part is it ties into the testing framework that you're already using. The Code and What It's Doing Mech.BreakAsync<MyClass>(); Seriously, that's it. With that Mecha searches for any public methods and properties, loops through them, finds interesting inputs for the methods, and runs them looking for exceptions to be thrown. Once an exception is thrown, it then uses the input to find the smallest possible value that still results in an issue. It then saves these issues as test cases for the future. Ok, so it breaks my method and does what? Mecha uses a concept borrowed from property testing known as shrinking. For instance you generate a list of 100 items for the method and it breaks. Mecha then removes some of the values and sees if it continues to break. It then continues to do this until it finds a list as small as possible that still breaks. Supported Types and Object Generation Mostly everything. It will generate inputs for all value types, enums, and even complete classes. It will give your methods FileStreams, HttpClients, Streams, etc. that throw exceptions themselves to see if your code can handle edge cases. Stubs/substitutes are automatically generated and fed through depending on the parameters of your method. It checks bounds, null, etc. as well. On top of that it takes into account any ValidationAttributes that it finds. So if you specify a range for a parameter, it will keep the values inside that range. Non Ninja Mutants On a successful run where no exception is thrown the input values are potentially mutated in ways that are known to cause issues. For instance adding \\0 in the middle of a string, etc. These are then run through the system to see if they can break the code. If they do, they're added to the set of results. If not, we mutate again and rerun up until the max number of mutations that you set in the options. Shrinking All the Things On a run where an exception is thrown, the input values are \"shrunk\". This involves taking a value and making it smaller in some way. For instance if a list of 100 values throws an exception, the system will remove 20 of them and try again. If it throws an exception, we shrink it again and again until it passes or we hit the max number of shrinks set in the options. Getting Started All you need to do is install the framework specific library from NuGet: Framework Library xUnit.Net Mecha.xUnit All other frameworks Mecha.Core This list should grow as new supported frameworks are added. If your library isn't supported, you can get access to the Mech class itself by adding the Mecha.Core library to your project. And if you like the library and would like to support your framework of choice, we'll gladly accept pull requests to add it. Anyway, what does the framework specific libraries give you? xUnit.Net [Property] public void MyTest(int value1,int value2, ...) { ... } The above code adds the Property attribute which lets xUnit.Net know that you want to assign values for value1, value2, etc. using the library. It then aggregates all of the failed tests in one result in the Test Explorer window with details about what values broke the test. Everything Else Mech.BreakAsync<MyClass>(); There are variations of the above method depending on your needs. Also note that you can specify various options including how long it should attempt to generate values, the number of shrinks to attempt, and the number of test cases to run from the generated values. FAQ What if I have a method that I don't want the library to run? A. The library comes with a DoNotBreak Attribute. Any method marked with this will be skipped by the library. Where is it saving the failed runs for later? A. By default the system places the failed runs in a directory called Mecha under the test library's bin directory. It's possible to override this and store the information somewhere else by implementing the Mecha.Core.Datasources.Interfaces.IDatasource interface. Can I create my own data generators? A. Yes by implementing the Mecha.Core.Generator.Interfaces.IGenerator interface. The system should automatically pick them up and use them. Can I create my own data shrinker? A. Yes by implementing the Mecha.Core.Shrinker.Interfaces.IShrinker interface. The system should automatically pick them up and use them. Can I create my own data mutator? A. Yes by implementing the Mecha.Core.Mutator.Interfaces.IMutator interface. The system should automatically pick them up and use them."
  }
}