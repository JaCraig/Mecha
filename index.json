{
  "api/Mecha.Core.Datasources.DataManager.html": {
    "href": "api/Mecha.Core.Datasources.DataManager.html",
    "title": "Class DataManager | Mecha API Reference",
    "keywords": "Class DataManager Data manager Inheritance object DataManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Datasources Assembly: Mecha.Core.dll Syntax public class DataManager Constructors | Improve this Doc View Source DataManager(IEnumerable<IDatasource>, IEnumerable<ISerializer>) Initializes a new instance of the DataManager class. Declaration public DataManager(IEnumerable<IDatasource> datasources, IEnumerable<ISerializer> serializers) Parameters Type Name Description IEnumerable<IDatasource> datasources The datasources. IEnumerable<ISerializer> serializers The serializers. Methods | Improve this Doc View Source Clear(MethodInfo) Clears the specified method data. Declaration public void Clear(MethodInfo method) Parameters Type Name Description MethodInfo method The method. | Improve this Doc View Source Read(MethodInfo) Reads the specified method's data. Declaration public List<object?[]> Read(MethodInfo method) Parameters Type Name Description MethodInfo method The method. Returns Type Description List<object[]> The data specified. | Improve this Doc View Source Save(MethodInfo, object?[]) Saves the specified method's data. Declaration public void Save(MethodInfo method, object?[] data) Parameters Type Name Description MethodInfo method The method. object[] data The data. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Datasources.DefaultDatasource.html": {
    "href": "api/Mecha.Core.Datasources.DefaultDatasource.html",
    "title": "Class DefaultDatasource | Mecha API Reference",
    "keywords": "Class DefaultDatasource Default datasource (exports to local directory) Inheritance object DefaultDatasource Implements IDatasource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Datasources Assembly: Mecha.Core.dll Syntax public class DefaultDatasource : IDatasource Constructors | Improve this Doc View Source DefaultDatasource() Initializes a new instance of the DefaultDatasource class. Declaration public DefaultDatasource() See Also IDatasource Methods | Improve this Doc View Source Clear(MethodInfo) Clears the specified method's param data. Declaration public void Clear(MethodInfo method) Parameters Type Name Description MethodInfo method The method. See Also IDatasource | Improve this Doc View Source Read(MethodInfo, ISerializer) Retrieves the data for the specified method. Declaration public List<object?[]> Read(MethodInfo method, ISerializer serializer) Parameters Type Name Description MethodInfo method The method. ISerializer serializer The serializer. Returns Type Description List<object[]> The list of data for the method. See Also IDatasource | Improve this Doc View Source Save(MethodInfo, object?[], ISerializer) Saves the specified param data for the method. Declaration public void Save(MethodInfo method, object?[] paramData, ISerializer serializer) Parameters Type Name Description MethodInfo method The method. object[] paramData The parameter data. ISerializer serializer The serializer. See Also IDatasource Implements IDatasource Extension Methods UtilsExtensions.IsInfinite(object?) See Also IDatasource"
  },
  "api/Mecha.Core.Datasources.DefaultSerializer.html": {
    "href": "api/Mecha.Core.Datasources.DefaultSerializer.html",
    "title": "Class DefaultSerializer | Mecha API Reference",
    "keywords": "Class DefaultSerializer Default serializer (goes to JSON) Inheritance object DefaultSerializer Implements ISerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Datasources Assembly: Mecha.Core.dll Syntax public class DefaultSerializer : ISerializer Methods | Improve this Doc View Source Deserialize(Type, string?) Deserializes the specified data. Declaration public object? Deserialize(Type objectType, string? data) Parameters Type Name Description Type objectType Type of the object. string data The data. Returns Type Description object The deserialized value. See Also ISerializer | Improve this Doc View Source Serialize(Type, object?) Serializes the specified data. Declaration public string? Serialize(Type objectType, object? data) Parameters Type Name Description Type objectType Type of the object. object data The data. Returns Type Description string The serialized value used for storage. See Also ISerializer Implements ISerializer Extension Methods UtilsExtensions.IsInfinite(object?) See Also ISerializer"
  },
  "api/Mecha.Core.Datasources.Interfaces.IDatasource.html": {
    "href": "api/Mecha.Core.Datasources.Interfaces.IDatasource.html",
    "title": "Interface IDatasource | Mecha API Reference",
    "keywords": "Interface IDatasource Datasource Namespace: Mecha.Core.Datasources.Interfaces Assembly: Mecha.Core.dll Syntax public interface IDatasource Methods | Improve this Doc View Source Clear(MethodInfo) Clears the specified method's param data. Declaration void Clear(MethodInfo method) Parameters Type Name Description MethodInfo method The method. | Improve this Doc View Source Read(MethodInfo, ISerializer) Retrieves the data for the specified method. Declaration List<object?[]> Read(MethodInfo method, ISerializer serializer) Parameters Type Name Description MethodInfo method The method. ISerializer serializer The serializer. Returns Type Description List<object[]> The list of data for the method. | Improve this Doc View Source Save(MethodInfo, object?[], ISerializer) Saves the specified param data for the method. Declaration void Save(MethodInfo method, object?[] paramData, ISerializer serializer) Parameters Type Name Description MethodInfo method The method. object[] paramData The parameter data. ISerializer serializer The serializer. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Datasources.Interfaces.ISerializer.html": {
    "href": "api/Mecha.Core.Datasources.Interfaces.ISerializer.html",
    "title": "Interface ISerializer | Mecha API Reference",
    "keywords": "Interface ISerializer Serializer interface Namespace: Mecha.Core.Datasources.Interfaces Assembly: Mecha.Core.dll Syntax public interface ISerializer Methods | Improve this Doc View Source Deserialize(Type, string?) Deserializes the specified data. Declaration object? Deserialize(Type objectType, string? data) Parameters Type Name Description Type objectType Type of the object. string data The data. Returns Type Description object The deserialized value. | Improve this Doc View Source Serialize(Type, object?) Serializes the specified data. Declaration string? Serialize(Type objectType, object? data) Parameters Type Name Description Type objectType Type of the object. object data The data. Returns Type Description string The serialized value used for storage. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Datasources.Interfaces.html": {
    "href": "api/Mecha.Core.Datasources.Interfaces.html",
    "title": "Namespace Mecha.Core.Datasources.Interfaces | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Datasources.Interfaces Interfaces IDatasource Datasource ISerializer Serializer interface"
  },
  "api/Mecha.Core.Datasources.html": {
    "href": "api/Mecha.Core.Datasources.html",
    "title": "Namespace Mecha.Core.Datasources | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Datasources Classes DataManager Data manager DefaultDatasource Default datasource (exports to local directory) DefaultSerializer Default serializer (goes to JSON)"
  },
  "api/Mecha.Core.DoNotBreakAttribute.html": {
    "href": "api/Mecha.Core.DoNotBreakAttribute.html",
    "title": "Class DoNotBreakAttribute | Mecha API Reference",
    "keywords": "Class DoNotBreakAttribute Property attribute Inheritance object Attribute DoNotBreakAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core Assembly: Mecha.Core.dll Syntax [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property, AllowMultiple = false)] public class DoNotBreakAttribute : Attribute Extension Methods UtilsExtensions.IsInfinite(object?) See Also Attribute"
  },
  "api/Mecha.Core.ExceptionHandler.html": {
    "href": "api/Mecha.Core.ExceptionHandler.html",
    "title": "Class ExceptionHandler | Mecha API Reference",
    "keywords": "Class ExceptionHandler Exception handler Inheritance object ExceptionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core Assembly: Mecha.Core.dll Syntax public class ExceptionHandler Methods | Improve this Doc View Source CanIgnore(Exception, MethodInfo) Determines whether this instance can ignore the specified exception. Declaration public bool CanIgnore(Exception exception, MethodInfo method) Parameters Type Name Description Exception exception The exception. MethodInfo method The method. Returns Type Description bool true if this instance can ignore the specified exception; otherwise, false. | Improve this Doc View Source IgnoreException<TException>(Func<Exception, MethodInfo, bool>?) Adds an exception to the ignore list. Declaration public ExceptionHandler IgnoreException<TException>(Func<Exception, MethodInfo, bool>? handler = null) Parameters Type Name Description Func<Exception, MethodInfo, bool> handler The handler (if not provided, a default handler is used). Returns Type Description ExceptionHandler This. Type Parameters Name Description TException The type of the exception. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Exceptions.GeneratorException.html": {
    "href": "api/Mecha.Core.Exceptions.GeneratorException.html",
    "title": "Class GeneratorException | Mecha API Reference",
    "keywords": "Class GeneratorException Generator exception Inheritance object Exception GeneratorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Mecha.Core.Exceptions Assembly: Mecha.Core.dll Syntax public class GeneratorException : Exception, ISerializable Constructors | Improve this Doc View Source GeneratorException() Initializes a new instance of the GeneratorException class. Declaration public GeneratorException() See Also Exception | Improve this Doc View Source GeneratorException(SerializationInfo, StreamingContext) Initializes a new instance of the GeneratorException class. Declaration protected GeneratorException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination. See Also Exception | Improve this Doc View Source GeneratorException(string) Initializes a new instance of the GeneratorException class. Declaration public GeneratorException(string message) Parameters Type Name Description string message The message that describes the error. See Also Exception | Improve this Doc View Source GeneratorException(string, Exception) Initializes a new instance of the GeneratorException class. Declaration public GeneratorException(string message, Exception innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. See Also Exception Implements ISerializable Extension Methods UtilsExtensions.IsInfinite(object?) See Also Exception"
  },
  "api/Mecha.Core.Exceptions.MethodBrokenException.html": {
    "href": "api/Mecha.Core.Exceptions.MethodBrokenException.html",
    "title": "Class MethodBrokenException | Mecha API Reference",
    "keywords": "Class MethodBrokenException The method threw an exception Inheritance object Exception MethodBrokenException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Mecha.Core.Exceptions Assembly: Mecha.Core.dll Syntax public class MethodBrokenException : Exception, ISerializable Constructors | Improve this Doc View Source MethodBrokenException() Initializes a new instance of the MethodBrokenException class. Declaration public MethodBrokenException() See Also Exception | Improve this Doc View Source MethodBrokenException(string?) Initializes a new instance of the MethodBrokenException class. Declaration public MethodBrokenException(string? message) Parameters Type Name Description string message The message that describes the error. See Also Exception | Improve this Doc View Source MethodBrokenException(string?, Exception?) Initializes a new instance of the MethodBrokenException class. Declaration public MethodBrokenException(string? message, Exception? innerException) Parameters Type Name Description string message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference ( Nothing in Visual Basic) if no inner exception is specified. See Also Exception Implements ISerializable Extension Methods UtilsExtensions.IsInfinite(object?) See Also Exception"
  },
  "api/Mecha.Core.Exceptions.html": {
    "href": "api/Mecha.Core.Exceptions.html",
    "title": "Namespace Mecha.Core.Exceptions | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Exceptions Classes GeneratorException Generator exception MethodBrokenException The method threw an exception"
  },
  "api/Mecha.Core.ExtensionMethods.ServiceCollectionExtensions.html": {
    "href": "api/Mecha.Core.ExtensionMethods.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Mecha API Reference",
    "keywords": "Class ServiceCollectionExtensions ServiceCollection extension methods. Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.ExtensionMethods Assembly: Mecha.Core.dll Syntax public static class ServiceCollectionExtensions Methods | Improve this Doc View Source AddMecha(IServiceCollection?) Adds mecha to the service collection. Declaration public static IServiceCollection? AddMecha(this IServiceCollection? serviceDescriptors) Parameters Type Name Description IServiceCollection serviceDescriptors The service descriptors. Returns Type Description IServiceCollection The service collection."
  },
  "api/Mecha.Core.ExtensionMethods.UtilsExtensions.html": {
    "href": "api/Mecha.Core.ExtensionMethods.UtilsExtensions.html",
    "title": "Class UtilsExtensions | Mecha API Reference",
    "keywords": "Class UtilsExtensions Utils extensions Inheritance object UtilsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.ExtensionMethods Assembly: Mecha.Core.dll Syntax public static class UtilsExtensions Methods | Improve this Doc View Source IsInfinite(object?) Determines whether the specified value is infinite. Declaration public static bool IsInfinite(this object? value) Parameters Type Name Description object value The value. Returns Type Description bool true if the specified value is infinite; otherwise, false."
  },
  "api/Mecha.Core.ExtensionMethods.html": {
    "href": "api/Mecha.Core.ExtensionMethods.html",
    "title": "Namespace Mecha.Core.ExtensionMethods | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.ExtensionMethods Classes ServiceCollectionExtensions ServiceCollection extension methods. UtilsExtensions Utils extensions"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.ArrayGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.ArrayGenerator.html",
    "title": "Class ArrayGenerator | Mecha API Reference",
    "keywords": "Class ArrayGenerator Array generator Inheritance object ArrayGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class ArrayGenerator : IGenerator Constructors | Improve this Doc View Source ArrayGenerator(Random) Initializes a new instance of the ArrayGenerator class. Declaration public ArrayGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.DefaultGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.DefaultGenerator.html",
    "title": "Class DefaultGenerator | Mecha API Reference",
    "keywords": "Class DefaultGenerator Default generator Inheritance object DefaultGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class DefaultGenerator : IGenerator Constructors | Improve this Doc View Source DefaultGenerator(Random) Initializes a new instance of the DefaultGenerator class. Declaration public DefaultGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.DefaultValueGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.DefaultValueGenerator.html",
    "title": "Class DefaultValueGenerator | Mecha API Reference",
    "keywords": "Class DefaultValueGenerator Default value generator Inheritance object DefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class DefaultValueGenerator : IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.DefaultValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.DefaultValueLookup.html",
    "title": "Class DefaultValueLookup | Mecha API Reference",
    "keywords": "Class DefaultValueLookup Default value lookup Inheritance object DefaultValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public static class DefaultValueLookup Properties | Improve this Doc View Source Values The values Declaration public static Dictionary<int, object?> Values { get; } Property Value Type Description Dictionary<int, object>"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.FileStreamGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.FileStreamGenerator.html",
    "title": "Class FileStreamGenerator | Mecha API Reference",
    "keywords": "Class FileStreamGenerator File stream generator Inheritance object FileStreamGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class FileStreamGenerator : IGenerator Constructors | Improve this Doc View Source FileStreamGenerator(Random) Initializes a new instance of the FileStreamGenerator class. Declaration public FileStreamGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator | Improve this Doc View Source RandomObj Gets the random object. Declaration public Random RandomObj { get; } Property Value Type Description Random The random object. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.HttpClientGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.HttpClientGenerator.html",
    "title": "Class HttpClientGenerator | Mecha API Reference",
    "keywords": "Class HttpClientGenerator HttpClient Generator Inheritance object HttpClientGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class HttpClientGenerator : IGenerator Constructors | Improve this Doc View Source HttpClientGenerator(Random) Initializes a new instance of the FileStreamGenerator class. Declaration public HttpClientGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator | Improve this Doc View Source RandomObj Gets the random object. Declaration public Random RandomObj { get; } Property Value Type Description Random The random object. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.InterfaceGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.InterfaceGenerator.html",
    "title": "Class InterfaceGenerator | Mecha API Reference",
    "keywords": "Class InterfaceGenerator Interface generator Inheritance object InterfaceGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class InterfaceGenerator : IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.MaxBoundaryGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.MaxBoundaryGenerator.html",
    "title": "Class MaxBoundaryGenerator | Mecha API Reference",
    "keywords": "Class MaxBoundaryGenerator Max Boundary generator Inheritance object MaxBoundaryGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class MaxBoundaryGenerator : IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.MinBoundaryGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.MinBoundaryGenerator.html",
    "title": "Class MinBoundaryGenerator | Mecha API Reference",
    "keywords": "Class MinBoundaryGenerator Min Boundary generator Inheritance object MinBoundaryGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class MinBoundaryGenerator : IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.NegationGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.NegationGenerator.html",
    "title": "Class NegationGenerator | Mecha API Reference",
    "keywords": "Class NegationGenerator Negation generator Inheritance object NegationGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class NegationGenerator : IGenerator Constructors | Improve this Doc View Source NegationGenerator(Random) Initializes a new instance of the NegationGenerator class. Declaration public NegationGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.ParameterDefaultValueGenerator.html",
    "title": "Class ParameterDefaultValueGenerator | Mecha API Reference",
    "keywords": "Class ParameterDefaultValueGenerator Parameter default value generator Inheritance object ParameterDefaultValueGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class ParameterDefaultValueGenerator : IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.SliceGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.SliceGenerator.html",
    "title": "Class SliceGenerator | Mecha API Reference",
    "keywords": "Class SliceGenerator Slice generator Inheritance object SliceGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class SliceGenerator : IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.StreamGenerator.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.StreamGenerator.html",
    "title": "Class StreamGenerator | Mecha API Reference",
    "keywords": "Class StreamGenerator Stream generator Inheritance object StreamGenerator Implements IGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators Assembly: Mecha.Core.dll Syntax public class StreamGenerator : IGenerator Constructors | Improve this Doc View Source StreamGenerator(Random) Initializes a new instance of the StreamGenerator class. Declaration public StreamGenerator(Random random) Parameters Type Name Description Random random The random. See Also IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration public int Order { get; } Property Value Type Description int The order. See Also IGenerator | Improve this Doc View Source RandomObj Gets the random object. Declaration public Random RandomObj { get; } Property Value Type Description Random The random object. See Also IGenerator Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration public bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. See Also IGenerator | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration public object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. See Also IGenerator Implements IGenerator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IGenerator"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.DummyClass.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.DummyClass.html",
    "title": "Class BasicTypesLookup.DummyClass | Mecha API Reference",
    "keywords": "Class BasicTypesLookup.DummyClass Dummy class Inheritance object BasicTypesLookup.DummyClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators.Utils Assembly: Mecha.Core.dll Syntax public class BasicTypesLookup.DummyClass Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.BasicTypesLookup.html",
    "title": "Class BasicTypesLookup | Mecha API Reference",
    "keywords": "Class BasicTypesLookup Basic types lookup Inheritance object BasicTypesLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators.Utils Assembly: Mecha.Core.dll Syntax public static class BasicTypesLookup Fields | Improve this Doc View Source Types The types Declaration public static Type[] Types Field Value Type Description Type[]"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.MaxValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.MaxValueLookup.html",
    "title": "Class MaxValueLookup | Mecha API Reference",
    "keywords": "Class MaxValueLookup Max value lookup Inheritance object MaxValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators.Utils Assembly: Mecha.Core.dll Syntax public static class MaxValueLookup Properties | Improve this Doc View Source Max Gets or sets the maximum. Declaration public static Dictionary<int, object>? Max { get; } Property Value Type Description Dictionary<int, object> The maximum."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.MinValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.MinValueLookup.html",
    "title": "Class MinValueLookup | Mecha API Reference",
    "keywords": "Class MinValueLookup Min value lookup Inheritance object MinValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators.Utils Assembly: Mecha.Core.dll Syntax public static class MinValueLookup Properties | Improve this Doc View Source Min Gets or sets the minimum. Declaration public static Dictionary<int, object>? Min { get; } Property Value Type Description Dictionary<int, object> The minimum."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.NegateValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.NegateValueLookup.html",
    "title": "Class NegateValueLookup | Mecha API Reference",
    "keywords": "Class NegateValueLookup Negate value lookup Inheritance object NegateValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators.Utils Assembly: Mecha.Core.dll Syntax public static class NegateValueLookup Properties | Improve this Doc View Source Negate Gets the negate. Declaration public static Dictionary<int, Func<object, object>>? Negate { get; } Property Value Type Description Dictionary<int, Func<object, object>> The negate."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.SliceValueLookup.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.SliceValueLookup.html",
    "title": "Class SliceValueLookup | Mecha API Reference",
    "keywords": "Class SliceValueLookup Slice value lookup Inheritance object SliceValueLookup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.DefaultGenerators.Utils Assembly: Mecha.Core.dll Syntax public static class SliceValueLookup Properties | Improve this Doc View Source Slice Slices the items and gets the mid point between the two values. Declaration public static Dictionary<int, Func<object, object, object>>? Slice { get; } Property Value Type Description Dictionary<int, Func<object, object, object>> The mid point between the two values."
  },
  "api/Mecha.Core.Generator.DefaultGenerators.Utils.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.Utils.html",
    "title": "Namespace Mecha.Core.Generator.DefaultGenerators.Utils | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Generator.DefaultGenerators.Utils Classes BasicTypesLookup Basic types lookup BasicTypesLookup.DummyClass Dummy class MaxValueLookup Max value lookup MinValueLookup Min value lookup NegateValueLookup Negate value lookup SliceValueLookup Slice value lookup"
  },
  "api/Mecha.Core.Generator.DefaultGenerators.html": {
    "href": "api/Mecha.Core.Generator.DefaultGenerators.html",
    "title": "Namespace Mecha.Core.Generator.DefaultGenerators | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Generator.DefaultGenerators Classes ArrayGenerator Array generator DefaultGenerator Default generator DefaultValueGenerator Default value generator DefaultValueLookup Default value lookup FileStreamGenerator File stream generator HttpClientGenerator HttpClient Generator InterfaceGenerator Interface generator MaxBoundaryGenerator Max Boundary generator MinBoundaryGenerator Min Boundary generator NegationGenerator Negation generator ParameterDefaultValueGenerator Parameter default value generator SliceGenerator Slice generator StreamGenerator Stream generator"
  },
  "api/Mecha.Core.Generator.GeneratorManager.html": {
    "href": "api/Mecha.Core.Generator.GeneratorManager.html",
    "title": "Class GeneratorManager | Mecha API Reference",
    "keywords": "Class GeneratorManager Generator manager Inheritance object GeneratorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator Assembly: Mecha.Core.dll Syntax public class GeneratorManager Constructors | Improve this Doc View Source GeneratorManager(IEnumerable<IGenerator>, Random) Initializes a new instance of the GeneratorManager class. Declaration public GeneratorManager(IEnumerable<IGenerator> generators, Random random) Parameters Type Name Description IEnumerable<IGenerator> generators The generators. Random random The random. Properties | Improve this Doc View Source Random Gets the random. Declaration public Random Random { get; } Property Value Type Description Random The random. Methods | Improve this Doc View Source GenerateParameterValues(ParameterInfo[], Options?) Generates the parameter values. Declaration public ParameterValues[] GenerateParameterValues(ParameterInfo[] parameters, Options? options) Parameters Type Name Description ParameterInfo[] parameters The parameters. Options options The options. Returns Type Description ParameterValues[] The parameter values Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Generator.Helpers.EmptyFileStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.EmptyFileStream.html",
    "title": "Class EmptyFileStream | Mecha API Reference",
    "keywords": "Class EmptyFileStream Empty file stream Inheritance object MarshalByRefObject Stream FileStream EmptyFileStream Implements IAsyncDisposable IDisposable Inherited Members FileStream.Dispose(bool) FileStream.DisposeAsync() FileStream.Name FileStream.SafeFileHandle Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.Helpers Assembly: Mecha.Core.dll Syntax public class EmptyFileStream : FileStream, IAsyncDisposable, IDisposable Constructors | Improve this Doc View Source EmptyFileStream() Initializes a new instance of the EmptyFileStream class. Declaration public EmptyFileStream() See Also FileStream Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool Overrides FileStream.CanRead See Also FileStream | Improve this Doc View Source CanSeek Gets a value that indicates whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool Overrides FileStream.CanSeek See Also FileStream | Improve this Doc View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override bool CanTimeout { get; } Property Value Type Description bool Overrides Stream.CanTimeout See Also FileStream | Improve this Doc View Source CanWrite Gets a value that indicates whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool Overrides FileStream.CanWrite See Also FileStream | Improve this Doc View Source Handle Gets the operating system file handle for the file that the current object encapsulates. Declaration [Obsolete(\"Handle no longer used\")] public override IntPtr Handle { get; } Property Value Type Description IntPtr Overrides FileStream.Handle See Also FileStream | Improve this Doc View Source IsAsync Gets a value that indicates whether the FileStream was opened asynchronously or synchronously. Declaration public override bool IsAsync { get; } Property Value Type Description bool Overrides FileStream.IsAsync See Also FileStream | Improve this Doc View Source Length Gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long Overrides FileStream.Length See Also FileStream | Improve this Doc View Source Position Gets or sets the current position of this stream. Declaration public override long Position { get; set; } Property Value Type Description long Overrides FileStream.Position See Also FileStream | Improve this Doc View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description int Overrides Stream.ReadTimeout See Also FileStream | Improve this Doc View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description int Overrides Stream.WriteTimeout See Also FileStream Methods | Improve this Doc View Source BeginRead(byte[], int, int, AsyncCallback, object) Begins an asynchronous read operation. Consider using ReadAsync(byte[], int, int, CancellationToken) instead. Declaration public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback callback, object state) Parameters Type Name Description byte[] array The buffer to read data into. int offset The byte offset in array at which to begin reading. int numBytes The maximum number of bytes to read. AsyncCallback callback The method to be called when the asynchronous read operation is completed. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An object that references the asynchronous read. Overrides FileStream.BeginRead(byte[], int, int, AsyncCallback, object) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source BeginWrite(byte[], int, int, AsyncCallback, object) Begins an asynchronous write operation. Consider using WriteAsync(byte[], int, int, CancellationToken) instead. Declaration public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback callback, object state) Parameters Type Name Description byte[] array The buffer containing data to write to the current stream. int offset The zero-based byte offset in array at which to begin copying bytes to the current stream. int numBytes The maximum number of bytes to write. AsyncCallback callback The method to be called when the asynchronous write operation is completed. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An object that references the asynchronous write. Overrides FileStream.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides Stream.Close() Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source CopyToAsync(Stream, int, CancellationToken) Copies to asynchronous. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The destination. int bufferSize Size of the buffer. CancellationToken cancellationToken The cancellation token. Returns Type Description Task Overrides FileStream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source EndRead(IAsyncResult) Waits for the pending asynchronous read operation to complete. (Consider using ReadAsync(byte[], int, int, CancellationToken) instead.) Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to wait for. Returns Type Description int The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available. Overrides FileStream.EndRead(IAsyncResult) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source EndWrite(IAsyncResult) Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using WriteAsync(byte[], int, int, CancellationToken) instead.) Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The pending asynchronous I/O request. Overrides FileStream.EndWrite(IAsyncResult) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ~EmptyFileStream() Finalizes an instance of the FaultyFileStream class. Declaration protected ~EmptyFileStream() See Also FileStream | Improve this Doc View Source Flush() Clears buffers for this stream and causes any buffered data to be written to the file. Declaration public override void Flush() Overrides FileStream.Flush() Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Flush(bool) Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers. Declaration public override void Flush(bool flushToDisk) Parameters Type Name Description bool flushToDisk true to flush all intermediate file buffers; otherwise, false. Overrides FileStream.Flush(bool) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides FileStream.FlushAsync(CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. Declaration public override object InitializeLifetimeService() Returns Type Description object An object of type System.Runtime.Remoting.Lifetime.ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime property. Overrides MarshalByRefObject.InitializeLifetimeService() See Also FileStream | Improve this Doc View Source Lock(long, long) Prevents other processes from reading from or writing to the FileStream. Declaration public override void Lock(long position, long length) Parameters Type Name Description long position The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). long length The range to be locked. Overrides FileStream.Lock(long, long) See Also FileStream | Improve this Doc View Source Read(byte[], int, int) Reads a block of bytes from the stream and writes the data in a given buffer. Declaration public override int Read(byte[] array, int offset, int count) Parameters Type Name Description byte[] array When this method returns, contains the specified byte array with the values between offset and ( offset + count - 1 ) replaced by the bytes read from the current source. int offset The byte offset in array at which the read bytes will be placed. int count The maximum number of bytes to read. Returns Type Description int The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Overrides FileStream.Read(byte[], int, int) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Read(Span<byte>) Reads the specified buffer. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer The buffer. Returns Type Description int Overrides FileStream.Read(Span<byte>) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current file stream and writes them to a byte array beginning at a specified offset, advances the position within the file stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task<int> A task that represents the asynchronous read operation and wraps the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Overrides FileStream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ReadAsync(Memory<byte>, CancellationToken) Reads the asynchronous. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The buffer. CancellationToken cancellationToken The cancellation token. Returns Type Description ValueTask<int> Overrides FileStream.ReadAsync(Memory<byte>, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ReadByte() Reads a byte from the file and advances the read position one byte. Declaration public override int ReadByte() Returns Type Description int The byte, cast to an int, or -1 if the end of the stream has been reached. Overrides FileStream.ReadByte() Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Seek(long, SeekOrigin) Sets the current position of this stream to the given value. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset The point relative to origin from which to begin seeking. SeekOrigin origin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin. Returns Type Description long The new position in the stream. Overrides FileStream.Seek(long, SeekOrigin) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source SetLength(long) Sets the length of this stream to the given value. Declaration public override void SetLength(long value) Parameters Type Name Description long value The new length of the stream. Overrides FileStream.SetLength(long) See Also FileStream | Improve this Doc View Source Unlock(long, long) Allows access by other processes to all or part of a file that was previously locked. Declaration public override void Unlock(long position, long length) Parameters Type Name Description long position The beginning of the range to unlock. long length The range to be unlocked. Overrides FileStream.Unlock(long, long) See Also FileStream | Improve this Doc View Source Write(byte[], int, int) Writes a block of bytes to the file stream. Declaration public override void Write(byte[] array, int offset, int count) Parameters Type Name Description byte[] array The buffer containing data to write to the stream. int offset The zero-based byte offset in array from which to begin copying bytes to the stream. int count The maximum number of bytes to write. Overrides FileStream.Write(byte[], int, int) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Write(ReadOnlySpan<byte>) Writes the specified buffer. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer The buffer. Overrides FileStream.Write(ReadOnlySpan<byte>) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task A task that represents the asynchronous write operation. Overrides FileStream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Writes the asynchronous. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The buffer. CancellationToken cancellationToken The cancellation token. Returns Type Description ValueTask Overrides FileStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source WriteByte(byte) Writes a byte to the current position in the file stream. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value A byte to write to the stream. Overrides FileStream.WriteByte(byte) Exceptions Type Condition FileNotFoundException See Also FileStream Implements IAsyncDisposable IDisposable Extension Methods UtilsExtensions.IsInfinite(object?) See Also FileStream"
  },
  "api/Mecha.Core.Generator.Helpers.EmptyHttpClient.html": {
    "href": "api/Mecha.Core.Generator.Helpers.EmptyHttpClient.html",
    "title": "Class EmptyHttpClient | Mecha API Reference",
    "keywords": "Class EmptyHttpClient Empty HTTP Client Inheritance object HttpMessageInvoker HttpClient EmptyHttpClient Implements IDisposable Inherited Members HttpClient.CancelPendingRequests() HttpClient.DeleteAsync(string) HttpClient.DeleteAsync(string, CancellationToken) HttpClient.DeleteAsync(Uri) HttpClient.DeleteAsync(Uri, CancellationToken) HttpClient.Dispose(bool) HttpClient.GetAsync(string) HttpClient.GetAsync(string, HttpCompletionOption) HttpClient.GetAsync(string, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(string, CancellationToken) HttpClient.GetAsync(Uri) HttpClient.GetAsync(Uri, HttpCompletionOption) HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(Uri, CancellationToken) HttpClient.GetByteArrayAsync(string) HttpClient.GetByteArrayAsync(string, CancellationToken) HttpClient.GetByteArrayAsync(Uri) HttpClient.GetByteArrayAsync(Uri, CancellationToken) HttpClient.GetStreamAsync(string) HttpClient.GetStreamAsync(string, CancellationToken) HttpClient.GetStreamAsync(Uri) HttpClient.GetStreamAsync(Uri, CancellationToken) HttpClient.GetStringAsync(string) HttpClient.GetStringAsync(string, CancellationToken) HttpClient.GetStringAsync(Uri) HttpClient.GetStringAsync(Uri, CancellationToken) HttpClient.PatchAsync(string, HttpContent) HttpClient.PatchAsync(string, HttpContent, CancellationToken) HttpClient.PatchAsync(Uri, HttpContent) HttpClient.PatchAsync(Uri, HttpContent, CancellationToken) HttpClient.PostAsync(string, HttpContent) HttpClient.PostAsync(string, HttpContent, CancellationToken) HttpClient.PostAsync(Uri, HttpContent) HttpClient.PostAsync(Uri, HttpContent, CancellationToken) HttpClient.PutAsync(string, HttpContent) HttpClient.PutAsync(string, HttpContent, CancellationToken) HttpClient.PutAsync(Uri, HttpContent) HttpClient.PutAsync(Uri, HttpContent, CancellationToken) HttpClient.Send(HttpRequestMessage) HttpClient.Send(HttpRequestMessage, HttpCompletionOption) HttpClient.Send(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.Send(HttpRequestMessage, CancellationToken) HttpClient.SendAsync(HttpRequestMessage) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.SendAsync(HttpRequestMessage, CancellationToken) HttpClient.BaseAddress HttpClient.DefaultProxy HttpClient.DefaultRequestHeaders HttpClient.DefaultRequestVersion HttpClient.DefaultVersionPolicy HttpClient.MaxResponseContentBufferSize HttpClient.Timeout HttpMessageInvoker.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.Helpers Assembly: Mecha.Core.dll Syntax public class EmptyHttpClient : HttpClient, IDisposable Constructors | Improve this Doc View Source EmptyHttpClient(Random) Initializes a new instance of the EmptyHttpClient class. Declaration public EmptyHttpClient(Random random) Parameters Type Name Description Random random The random. See Also HttpClient Implements IDisposable Extension Methods UtilsExtensions.IsInfinite(object?) See Also HttpClient"
  },
  "api/Mecha.Core.Generator.Helpers.EmptyStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.EmptyStream.html",
    "title": "Class EmptyStream | Mecha API Reference",
    "keywords": "Class EmptyStream Empty stream (does nothing) Inheritance object MarshalByRefObject Stream EmptyStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.Helpers Assembly: Mecha.Core.dll Syntax public class EmptyStream : Stream, IAsyncDisposable, IDisposable Constructors | Improve this Doc View Source EmptyStream() Initializes a new instance of the EmptyStream class. Declaration public EmptyStream() See Also Stream Properties | Improve this Doc View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool Overrides Stream.CanRead See Also Stream | Improve this Doc View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool Overrides Stream.CanSeek See Also Stream | Improve this Doc View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public override bool CanTimeout { get; } Property Value Type Description bool Overrides Stream.CanTimeout See Also Stream | Improve this Doc View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool Overrides Stream.CanWrite See Also Stream | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long Overrides Stream.Length See Also Stream | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long Overrides Stream.Position See Also Stream | Improve this Doc View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public override int ReadTimeout { get; set; } Property Value Type Description int Overrides Stream.ReadTimeout See Also Stream | Improve this Doc View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public override int WriteTimeout { get; set; } Property Value Type Description int Overrides Stream.WriteTimeout See Also Stream Methods | Improve this Doc View Source BeginRead(byte[], int, int, AsyncCallback, object) Begins an asynchronous read operation. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override IAsyncResult? BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description byte[] buffer The buffer to read the data into. int offset The byte offset in buffer at which to begin writing data read from the stream. int count The maximum number of bytes to read. AsyncCallback callback An optional asynchronous callback, to be called when the read is complete. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous read, which could still be pending. Overrides Stream.BeginRead(byte[], int, int, AsyncCallback, object) See Also Stream | Improve this Doc View Source BeginWrite(byte[], int, int, AsyncCallback, object) Begins an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override IAsyncResult? BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The byte offset in buffer from which to begin writing. int count The maximum number of bytes to write. AsyncCallback callback An optional asynchronous callback, to be called when the write is complete. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An IAsyncResult that represents the asynchronous write, which could still be pending. Overrides Stream.BeginWrite(byte[], int, int, AsyncCallback, object) See Also Stream | Improve this Doc View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides Stream.Close() See Also Stream | Improve this Doc View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) See Also Stream | Improve this Doc View Source CopyToAsync(Stream, int, CancellationToken) Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous copy operation. Overrides Stream.CopyToAsync(Stream, int, CancellationToken) See Also Stream | Improve this Doc View Source CreateWaitHandle() Allocates a WaitHandle object. Declaration [Obsolete(\"Reasons\")] protected override WaitHandle? CreateWaitHandle() Returns Type Description WaitHandle A reference to the allocated WaitHandle. Overrides Stream.CreateWaitHandle() See Also Stream | Improve this Doc View Source EndRead(IAsyncResult) Waits for the pending asynchronous read to complete. (Consider using ReadAsync(byte[], int, int) instead.) Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to finish. Returns Type Description int The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available. Overrides Stream.EndRead(IAsyncResult) See Also Stream | Improve this Doc View Source EndWrite(IAsyncResult) Ends an asynchronous write operation. (Consider using WriteAsync(byte[], int, int) instead.) Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult A reference to the outstanding asynchronous I/O request. Overrides Stream.EndWrite(IAsyncResult) See Also Stream | Improve this Doc View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() See Also Stream | Improve this Doc View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides Stream.FlushAsync(CancellationToken) See Also Stream | Improve this Doc View Source InitializeLifetimeService() Obtains a lifetime service object to control the lifetime policy for this instance. Declaration public override object? InitializeLifetimeService() Returns Type Description object An object of type System.Runtime.Remoting.Lifetime.ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime property. Overrides MarshalByRefObject.InitializeLifetimeService() See Also Stream | Improve this Doc View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition EndOfStreamException See Also Stream | Improve this Doc View Source Read(Span<byte>) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer A region of memory. When this method returns, the contents of this region are replaced by the bytes read from the current source. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(Span<byte>) See Also Stream | Improve this Doc View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task<int> A task that represents the asynchronous read operation. The value of the parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Overrides Stream.ReadAsync(byte[], int, int, CancellationToken) See Also Stream | Improve this Doc View Source ReadAsync(Memory<byte>, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The region of memory to write the data into. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask<int> A task that represents the asynchronous read operation. The value of its Result property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes allocated in the buffer if that many bytes are not currently available, or it can be 0 (zero) if the end of the stream has been reached. Overrides Stream.ReadAsync(Memory<byte>, CancellationToken) See Also Stream | Improve this Doc View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description int The unsigned byte cast to an Int32, or -1 if at the end of the stream. Overrides Stream.ReadByte() See Also Stream | Improve this Doc View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition EndOfStreamException See Also Stream | Improve this Doc View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) See Also Stream | Improve this Doc View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) See Also Stream | Improve this Doc View Source Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer A region of memory. This method copies the contents of this region to the current stream. Overrides Stream.Write(ReadOnlySpan<byte>) See Also Stream | Improve this Doc View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description Task A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(byte[], int, int, CancellationToken) See Also Stream | Improve this Doc View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The region of memory to write data from. CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is None. Returns Type Description ValueTask A task that represents the asynchronous write operation. Overrides Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) See Also Stream | Improve this Doc View Source WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value The byte to write to the stream. Overrides Stream.WriteByte(byte) See Also Stream Implements IAsyncDisposable IDisposable Extension Methods UtilsExtensions.IsInfinite(object?) See Also Stream"
  },
  "api/Mecha.Core.Generator.Helpers.FaultyFileStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.FaultyFileStream.html",
    "title": "Class FaultyFileStream | Mecha API Reference",
    "keywords": "Class FaultyFileStream Faulty file stream Inheritance object MarshalByRefObject Stream FileStream FaultyFileStream Implements IAsyncDisposable IDisposable Inherited Members FileStream.Dispose(bool) FileStream.DisposeAsync() FileStream.Lock(long, long) FileStream.SetLength(long) FileStream.Unlock(long, long) FileStream.CanRead FileStream.CanSeek FileStream.CanWrite FileStream.Handle FileStream.IsAsync FileStream.Length FileStream.Name FileStream.Position FileStream.SafeFileHandle Stream.Null Stream.CopyTo(Stream) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.FlushAsync() Stream.ObjectInvariant() Stream.ReadAsync(byte[], int, int) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.Helpers Assembly: Mecha.Core.dll Syntax public class FaultyFileStream : FileStream, IAsyncDisposable, IDisposable Constructors | Improve this Doc View Source FaultyFileStream() Initializes a new instance of the FaultyFileStream class. Declaration public FaultyFileStream() See Also FileStream Methods | Improve this Doc View Source BeginRead(byte[], int, int, AsyncCallback, object) Begins an asynchronous read operation. Consider using ReadAsync(byte[], int, int, CancellationToken) instead. Declaration public override IAsyncResult BeginRead(byte[] array, int offset, int numBytes, AsyncCallback callback, object state) Parameters Type Name Description byte[] array The buffer to read data into. int offset The byte offset in array at which to begin reading. int numBytes The maximum number of bytes to read. AsyncCallback callback The method to be called when the asynchronous read operation is completed. object state A user-provided object that distinguishes this particular asynchronous read request from other requests. Returns Type Description IAsyncResult An object that references the asynchronous read. Overrides FileStream.BeginRead(byte[], int, int, AsyncCallback, object) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source BeginWrite(byte[], int, int, AsyncCallback, object) Begins an asynchronous write operation. Consider using WriteAsync(byte[], int, int, CancellationToken) instead. Declaration public override IAsyncResult BeginWrite(byte[] array, int offset, int numBytes, AsyncCallback callback, object state) Parameters Type Name Description byte[] array The buffer containing data to write to the current stream. int offset The zero-based byte offset in array at which to begin copying bytes to the current stream. int numBytes The maximum number of bytes to write. AsyncCallback callback The method to be called when the asynchronous write operation is completed. object state A user-provided object that distinguishes this particular asynchronous write request from other requests. Returns Type Description IAsyncResult An object that references the asynchronous write. Overrides FileStream.BeginWrite(byte[], int, int, AsyncCallback, object) Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public override void Close() Overrides Stream.Close() Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source CopyTo(Stream, int) Reads the bytes from the current stream and writes them to another stream, using a specified buffer size. Declaration public override void CopyTo(Stream destination, int bufferSize) Parameters Type Name Description Stream destination The stream to which the contents of the current stream will be copied. int bufferSize The size of the buffer. This value must be greater than zero. The default size is 81920. Overrides Stream.CopyTo(Stream, int) Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source CopyToAsync(Stream, int, CancellationToken) Copies to asynchronous. Declaration public override Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken) Parameters Type Name Description Stream destination The destination. int bufferSize Size of the buffer. CancellationToken cancellationToken The cancellation token. Returns Type Description Task Overrides FileStream.CopyToAsync(Stream, int, CancellationToken) Exceptions Type Condition EndOfStreamException See Also FileStream | Improve this Doc View Source EndRead(IAsyncResult) Waits for the pending asynchronous read operation to complete. (Consider using ReadAsync(byte[], int, int, CancellationToken) instead.) Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The reference to the pending asynchronous request to wait for. Returns Type Description int The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available. Overrides FileStream.EndRead(IAsyncResult) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source EndWrite(IAsyncResult) Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using WriteAsync(byte[], int, int, CancellationToken) instead.) Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult The pending asynchronous I/O request. Overrides FileStream.EndWrite(IAsyncResult) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ~FaultyFileStream() Finalizes an instance of the FaultyFileStream class. Declaration protected ~FaultyFileStream() See Also FileStream | Improve this Doc View Source Flush() Clears buffers for this stream and causes any buffered data to be written to the file. Declaration public override void Flush() Overrides FileStream.Flush() Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Flush(bool) Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers. Declaration public override void Flush(bool flushToDisk) Parameters Type Name Description bool flushToDisk true to flush all intermediate file buffers; otherwise, false. Overrides FileStream.Flush(bool) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task A task that represents the asynchronous flush operation. Overrides FileStream.FlushAsync(CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Read(byte[], int, int) Reads a block of bytes from the stream and writes the data in a given buffer. Declaration public override int Read(byte[] array, int offset, int count) Parameters Type Name Description byte[] array When this method returns, contains the specified byte array with the values between offset and ( offset + count - 1 ) replaced by the bytes read from the current source. int offset The byte offset in array at which the read bytes will be placed. int count The maximum number of bytes to read. Returns Type Description int The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Overrides FileStream.Read(byte[], int, int) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Read(Span<byte>) Reads the specified buffer. Declaration public override int Read(Span<byte> buffer) Parameters Type Name Description Span<byte> buffer The buffer. Returns Type Description int Overrides FileStream.Read(Span<byte>) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current file stream and writes them to a byte array beginning at a specified offset, advances the position within the file stream by the number of bytes read, and monitors cancellation requests. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write the data into. int offset The byte offset in buffer at which to begin writing data from the stream. int count The maximum number of bytes to read. CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task<int> A task that represents the asynchronous read operation and wraps the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Overrides FileStream.ReadAsync(byte[], int, int, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ReadAsync(Memory<byte>, CancellationToken) Reads the asynchronous. Declaration public override ValueTask<int> ReadAsync(Memory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description Memory<byte> buffer The buffer. CancellationToken cancellationToken The cancellation token. Returns Type Description ValueTask<int> Overrides FileStream.ReadAsync(Memory<byte>, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source ReadByte() Reads a byte from the file and advances the read position one byte. Declaration public override int ReadByte() Returns Type Description int The byte, cast to an int, or -1 if the end of the stream has been reached. Overrides FileStream.ReadByte() Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Seek(long, SeekOrigin) Sets the current position of this stream to the given value. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset The point relative to origin from which to begin seeking. SeekOrigin origin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin. Returns Type Description long The new position in the stream. Overrides FileStream.Seek(long, SeekOrigin) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Write(byte[], int, int) Writes a block of bytes to the file stream. Declaration public override void Write(byte[] array, int offset, int count) Parameters Type Name Description byte[] array The buffer containing data to write to the stream. int offset The zero-based byte offset in array from which to begin copying bytes to the stream. int count The maximum number of bytes to write. Overrides FileStream.Write(byte[], int, int) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source Write(ReadOnlySpan<byte>) Writes the specified buffer. Declaration public override void Write(ReadOnlySpan<byte> buffer) Parameters Type Name Description ReadOnlySpan<byte> buffer The buffer. Overrides FileStream.Write(ReadOnlySpan<byte>) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description byte[] buffer The buffer to write data from. int offset The zero-based byte offset in buffer from which to begin copying bytes to the stream. int count The maximum number of bytes to write. CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description Task A task that represents the asynchronous write operation. Overrides FileStream.WriteAsync(byte[], int, int, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Writes the asynchronous. Declaration public override ValueTask WriteAsync(ReadOnlyMemory<byte> buffer, CancellationToken cancellationToken = default) Parameters Type Name Description ReadOnlyMemory<byte> buffer The buffer. CancellationToken cancellationToken The cancellation token. Returns Type Description ValueTask Overrides FileStream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Exceptions Type Condition FileNotFoundException See Also FileStream | Improve this Doc View Source WriteByte(byte) Writes a byte to the current position in the file stream. Declaration public override void WriteByte(byte value) Parameters Type Name Description byte value A byte to write to the stream. Overrides FileStream.WriteByte(byte) Exceptions Type Condition FileNotFoundException See Also FileStream Implements IAsyncDisposable IDisposable Extension Methods UtilsExtensions.IsInfinite(object?) See Also FileStream"
  },
  "api/Mecha.Core.Generator.Helpers.FaultyHttpClient.html": {
    "href": "api/Mecha.Core.Generator.Helpers.FaultyHttpClient.html",
    "title": "Class FaultyHttpClient | Mecha API Reference",
    "keywords": "Class FaultyHttpClient Faulty HTTP Client Inheritance object HttpMessageInvoker HttpClient FaultyHttpClient Implements IDisposable Inherited Members HttpClient.CancelPendingRequests() HttpClient.DeleteAsync(string) HttpClient.DeleteAsync(string, CancellationToken) HttpClient.DeleteAsync(Uri) HttpClient.DeleteAsync(Uri, CancellationToken) HttpClient.Dispose(bool) HttpClient.GetAsync(string) HttpClient.GetAsync(string, HttpCompletionOption) HttpClient.GetAsync(string, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(string, CancellationToken) HttpClient.GetAsync(Uri) HttpClient.GetAsync(Uri, HttpCompletionOption) HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken) HttpClient.GetAsync(Uri, CancellationToken) HttpClient.GetByteArrayAsync(string) HttpClient.GetByteArrayAsync(string, CancellationToken) HttpClient.GetByteArrayAsync(Uri) HttpClient.GetByteArrayAsync(Uri, CancellationToken) HttpClient.GetStreamAsync(string) HttpClient.GetStreamAsync(string, CancellationToken) HttpClient.GetStreamAsync(Uri) HttpClient.GetStreamAsync(Uri, CancellationToken) HttpClient.GetStringAsync(string) HttpClient.GetStringAsync(string, CancellationToken) HttpClient.GetStringAsync(Uri) HttpClient.GetStringAsync(Uri, CancellationToken) HttpClient.PatchAsync(string, HttpContent) HttpClient.PatchAsync(string, HttpContent, CancellationToken) HttpClient.PatchAsync(Uri, HttpContent) HttpClient.PatchAsync(Uri, HttpContent, CancellationToken) HttpClient.PostAsync(string, HttpContent) HttpClient.PostAsync(string, HttpContent, CancellationToken) HttpClient.PostAsync(Uri, HttpContent) HttpClient.PostAsync(Uri, HttpContent, CancellationToken) HttpClient.PutAsync(string, HttpContent) HttpClient.PutAsync(string, HttpContent, CancellationToken) HttpClient.PutAsync(Uri, HttpContent) HttpClient.PutAsync(Uri, HttpContent, CancellationToken) HttpClient.Send(HttpRequestMessage) HttpClient.Send(HttpRequestMessage, HttpCompletionOption) HttpClient.Send(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.Send(HttpRequestMessage, CancellationToken) HttpClient.SendAsync(HttpRequestMessage) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption) HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken) HttpClient.BaseAddress HttpClient.DefaultProxy HttpClient.DefaultRequestHeaders HttpClient.DefaultRequestVersion HttpClient.DefaultVersionPolicy HttpClient.MaxResponseContentBufferSize HttpClient.Timeout HttpMessageInvoker.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.Helpers Assembly: Mecha.Core.dll Syntax public class FaultyHttpClient : HttpClient, IDisposable Constructors | Improve this Doc View Source FaultyHttpClient() Initializes a new instance of the FaultyHttpClient class. Declaration public FaultyHttpClient() See Also HttpClient Methods | Improve this Doc View Source SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. Declaration public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters Type Name Description HttpRequestMessage request The HTTP request message to send. CancellationToken cancellationToken The cancellation token to cancel operation. Returns Type Description Task<HttpResponseMessage> The task object representing the asynchronous operation. Overrides HttpClient.SendAsync(HttpRequestMessage, CancellationToken) Exceptions Type Condition HttpRequestException Website not accessible See Also HttpClient Implements IDisposable Extension Methods UtilsExtensions.IsInfinite(object?) See Also HttpClient"
  },
  "api/Mecha.Core.Generator.Helpers.FaultyStream.html": {
    "href": "api/Mecha.Core.Generator.Helpers.FaultyStream.html",
    "title": "Class FaultyStream | Mecha API Reference",
    "keywords": "Class FaultyStream Stream that throws faults Inheritance object MarshalByRefObject Stream FaultyStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator.Helpers Assembly: Mecha.Core.dll Syntax public class FaultyStream : Stream, IAsyncDisposable, IDisposable Properties | Improve this Doc View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description bool Overrides Stream.CanRead See Also Stream | Improve this Doc View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description bool Overrides Stream.CanSeek See Also Stream | Improve this Doc View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description bool Overrides Stream.CanWrite See Also Stream | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description long Overrides Stream.Length See Also Stream | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description long Overrides Stream.Position See Also Stream Methods | Improve this Doc View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() Exceptions Type Condition EndOfStreamException See Also Stream | Improve this Doc View Source Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset count - 1) replaced by the bytes read from the current source. int offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. int count The maximum number of bytes to be read from the current stream. Returns Type Description int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(byte[], int, int) Exceptions Type Condition EndOfStreamException See Also Stream | Improve this Doc View Source Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description long offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description long The new position within the current stream. Overrides Stream.Seek(long, SeekOrigin) Exceptions Type Condition EndOfStreamException See Also Stream | Improve this Doc View Source SetLength(long) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description long value The desired length of the current stream in bytes. Overrides Stream.SetLength(long) Exceptions Type Condition EndOfStreamException See Also Stream | Improve this Doc View Source Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description byte[] buffer An array of bytes. This method copies count bytes from buffer to the current stream. int offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. int count The number of bytes to be written to the current stream. Overrides Stream.Write(byte[], int, int) Exceptions Type Condition EndOfStreamException See Also Stream Implements IAsyncDisposable IDisposable Extension Methods UtilsExtensions.IsInfinite(object?) See Also Stream"
  },
  "api/Mecha.Core.Generator.Helpers.html": {
    "href": "api/Mecha.Core.Generator.Helpers.html",
    "title": "Namespace Mecha.Core.Generator.Helpers | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Generator.Helpers Classes EmptyFileStream Empty file stream EmptyHttpClient Empty HTTP Client EmptyStream Empty stream (does nothing) FaultyFileStream Faulty file stream FaultyHttpClient Faulty HTTP Client FaultyStream Stream that throws faults"
  },
  "api/Mecha.Core.Generator.Interfaces.IGenerator.html": {
    "href": "api/Mecha.Core.Generator.Interfaces.IGenerator.html",
    "title": "Interface IGenerator | Mecha API Reference",
    "keywords": "Interface IGenerator Generator interface. Namespace: Mecha.Core.Generator.Interfaces Assembly: Mecha.Core.dll Syntax public interface IGenerator Properties | Improve this Doc View Source Order Gets the order. Declaration int Order { get; } Property Value Type Description int The order. Methods | Improve this Doc View Source CanGenerate(ParameterInfo?) Determines whether this instance can generate the specified parameter. Declaration bool CanGenerate(ParameterInfo? parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Returns Type Description bool true if this instance can generate the specified parameter; otherwise, false. | Improve this Doc View Source Next(ParameterInfo?, object?, object?) Generates the next object of the specified parameter type. Declaration object? Next(ParameterInfo? parameter, object? min, object? max) Parameters Type Name Description ParameterInfo parameter The parameter. object min The minimum. object max The maximum. Returns Type Description object The next object. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Generator.Interfaces.html": {
    "href": "api/Mecha.Core.Generator.Interfaces.html",
    "title": "Namespace Mecha.Core.Generator.Interfaces | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Generator.Interfaces Interfaces IGenerator Generator interface."
  },
  "api/Mecha.Core.Generator.ParameterValues.html": {
    "href": "api/Mecha.Core.Generator.ParameterValues.html",
    "title": "Class ParameterValues | Mecha API Reference",
    "keywords": "Class ParameterValues Parameter values Inheritance object ParameterValues Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Generator Assembly: Mecha.Core.dll Syntax public class ParameterValues Constructors | Improve this Doc View Source ParameterValues(ParameterInfo) Initializes a new instance of the ParameterValues class. Declaration public ParameterValues(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. Properties | Improve this Doc View Source GeneratedValues Gets the generated values. Declaration public List<object?> GeneratedValues { get; } Property Value Type Description List<object> The generated values. | Improve this Doc View Source Parameter Gets or sets the parameter. Declaration public ParameterInfo? Parameter { get; set; } Property Value Type Description ParameterInfo The parameter. Methods | Improve this Doc View Source AddValue(object?) Adds the value specified if it is valid. Declaration public void AddValue(object? value) Parameters Type Name Description object value The value. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Generator.html": {
    "href": "api/Mecha.Core.Generator.html",
    "title": "Namespace Mecha.Core.Generator | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Generator Classes GeneratorManager Generator manager ParameterValues Parameter values"
  },
  "api/Mecha.Core.Mech.html": {
    "href": "api/Mecha.Core.Mech.html",
    "title": "Class Mech | Mecha API Reference",
    "keywords": "Class Mech Main class for breaking the Inheritance object Mech Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core Assembly: Mecha.Core.dll Syntax public class Mech Constructors | Improve this Doc View Source Mech(GeneratorManager, DataManager, TestRunnerManager, Random, ShrinkerManager, MutatorManager) Initializes a new instance of the Mech class. Declaration public Mech(GeneratorManager generatorManager, DataManager dataManager, TestRunnerManager testRunnerManager, Random random, ShrinkerManager shrinker, MutatorManager mutator) Parameters Type Name Description GeneratorManager generatorManager The generator manager. DataManager dataManager The data manager. TestRunnerManager testRunnerManager The test runner manager. Random random The random. ShrinkerManager shrinker The shrinker. MutatorManager mutator The mutator. Properties | Improve this Doc View Source DataManager Gets the data manager. Declaration public DataManager DataManager { get; } Property Value Type Description DataManager The data manager. | Improve this Doc View Source Default Gets the default. Declaration public static Mech? Default { get; } Property Value Type Description Mech The default. | Improve this Doc View Source GeneratorManager Gets the generator manager. Declaration public GeneratorManager GeneratorManager { get; } Property Value Type Description GeneratorManager The generator manager. | Improve this Doc View Source Mutator Gets the mutator. Declaration public MutatorManager? Mutator { get; } Property Value Type Description MutatorManager The mutator. | Improve this Doc View Source Random Gets the random. Declaration public Random Random { get; } Property Value Type Description Random The random. | Improve this Doc View Source Shrinker Gets the shrinker. Declaration public ShrinkerManager Shrinker { get; } Property Value Type Description ShrinkerManager The shrinker. | Improve this Doc View Source TestRunnerManager Gets the test runner manager. Declaration public TestRunnerManager TestRunnerManager { get; } Property Value Type Description TestRunnerManager The test runner manager. Methods | Improve this Doc View Source BreakAsync(Action, Options?) Breaks the action. Declaration public static Task BreakAsync(Action action, Options? options = null) Parameters Type Name Description Action action The action. Options options The options. Returns Type Description Task | Improve this Doc View Source BreakAsync(MethodInfo, object?, Options?) Breaks the method. Declaration public static Task BreakAsync(MethodInfo method, object? target, Options? options = null) Parameters Type Name Description MethodInfo method The method. object target The target. Options options The options. Returns Type Description Task | Improve this Doc View Source BreakAsync(Type, Options?) Finds the methods of the class type specified and tries to break them. Declaration public static Task BreakAsync(Type classType, Options? options = null) Parameters Type Name Description Type classType Type of the class. Options options The options. Returns Type Description Task The async task. | Improve this Doc View Source BreakAsync<TClass>(Options?) Finds the methods of the class type specified and tries to break them. Declaration public static Task BreakAsync<TClass>(Options? options = null) Parameters Type Name Description Options options Returns Type Description Task The async task. Type Parameters Name Description TClass The type of the class. | Improve this Doc View Source BreakAsync<TValue1>(Action<TValue1>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1>(Action<TValue1> action, Options? options = null) Parameters Type Name Description Action<TValue1> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. | Improve this Doc View Source BreakAsync<TClass>(TClass, Options?) Breaks the specified target. Declaration public static Task BreakAsync<TClass>(TClass target, Options? options = null) Parameters Type Name Description TClass target The target. Options options The options. Returns Type Description Task Type Parameters Name Description TClass The type of the class. Exceptions Type Condition AggregateException | Improve this Doc View Source BreakAsync<TValue1, TValue2>(Action<TValue1, TValue2>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1, TValue2>(Action<TValue1, TValue2> action, Options? options = null) Parameters Type Name Description Action<TValue1, TValue2> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. TValue2 The type of the value2. | Improve this Doc View Source BreakAsync<TValue1, TValue2, TValue3>(Action<TValue1, TValue2, TValue3>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1, TValue2, TValue3>(Action<TValue1, TValue2, TValue3> action, Options? options = null) Parameters Type Name Description Action<TValue1, TValue2, TValue3> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. | Improve this Doc View Source BreakAsync<TValue1, TValue2, TValue3, TValue4>(Action<TValue1, TValue2, TValue3, TValue4>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4>(Action<TValue1, TValue2, TValue3, TValue4> action, Options? options = null) Parameters Type Name Description Action<TValue1, TValue2, TValue3, TValue4> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. | Improve this Doc View Source BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(Action<TValue1, TValue2, TValue3, TValue4, TValue5>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(Action<TValue1, TValue2, TValue3, TValue4, TValue5> action, Options? options = null) Parameters Type Name Description Action<TValue1, TValue2, TValue3, TValue4, TValue5> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. TValue5 The type of the value5. | Improve this Doc View Source BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> action, Options? options = null) Parameters Type Name Description Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. TValue5 The type of the value5. TValue6 The type of the value6. | Improve this Doc View Source BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>, Options?) Breaks the action. Declaration public static Task BreakAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> action, Options? options = null) Parameters Type Name Description Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> action The action. Options options The options. Returns Type Description Task Type Parameters Name Description TValue1 The type of the value1. TValue2 The type of the value2. TValue3 The type of the value3. TValue4 The type of the value4. TValue5 The type of the value5. TValue6 The type of the value6. TValue7 The type of the value7. | Improve this Doc View Source RunAsync(MethodInfo?, object?, Options?) Runs the specified method. Declaration public Task<Result> RunAsync(MethodInfo? runMethod, object? target, Options? options) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. Returns Type Description Task<Result> The result Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Modules.CanisterModule.html": {
    "href": "api/Mecha.Core.Modules.CanisterModule.html",
    "title": "Class CanisterModule | Mecha API Reference",
    "keywords": "Class CanisterModule Canister module Inheritance object CanisterModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Modules Assembly: Mecha.Core.dll Syntax public class CanisterModule : IModule Properties | Improve this Doc View Source Order Order to run this in Declaration public int Order { get; } Property Value Type Description int See Also IModule Methods | Improve this Doc View Source Load(IServiceCollection?) Loads the module using the bootstrapper Declaration public void Load(IServiceCollection? bootstrapper) Parameters Type Name Description IServiceCollection bootstrapper The bootstrapper. See Also IModule Implements IModule Extension Methods UtilsExtensions.IsInfinite(object?) See Also IModule"
  },
  "api/Mecha.Core.Modules.html": {
    "href": "api/Mecha.Core.Modules.html",
    "title": "Namespace Mecha.Core.Modules | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Modules Classes CanisterModule Canister module"
  },
  "api/Mecha.Core.Mutator.Defaults.StringMutator.html": {
    "href": "api/Mecha.Core.Mutator.Defaults.StringMutator.html",
    "title": "Class StringMutator | Mecha API Reference",
    "keywords": "Class StringMutator String mutator Inheritance object StringMutator Implements IMutator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Mutator.Defaults Assembly: Mecha.Core.dll Syntax public class StringMutator : IMutator Constructors | Improve this Doc View Source StringMutator(Random) Initializes a new instance of the StringMutator class. Declaration public StringMutator(Random random) Parameters Type Name Description Random random The random. See Also IMutator Methods | Improve this Doc View Source CanMutate(object?) Determines whether this instance can mutate the specified value. Declaration public bool CanMutate(object? value) Parameters Type Name Description object value The value. Returns Type Description bool true if this instance can mutate the specified value; otherwise, false. See Also IMutator | Improve this Doc View Source Mutate(object?) Mutates the specified value. Declaration public object? Mutate(object? value) Parameters Type Name Description object value The value. Returns Type Description object The mutated value. See Also IMutator Implements IMutator Extension Methods UtilsExtensions.IsInfinite(object?) See Also IMutator"
  },
  "api/Mecha.Core.Mutator.Defaults.html": {
    "href": "api/Mecha.Core.Mutator.Defaults.html",
    "title": "Namespace Mecha.Core.Mutator.Defaults | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Mutator.Defaults Classes StringMutator String mutator"
  },
  "api/Mecha.Core.Mutator.Interfaces.IMutator.html": {
    "href": "api/Mecha.Core.Mutator.Interfaces.IMutator.html",
    "title": "Interface IMutator | Mecha API Reference",
    "keywords": "Interface IMutator Mutator interface Namespace: Mecha.Core.Mutator.Interfaces Assembly: Mecha.Core.dll Syntax public interface IMutator Methods | Improve this Doc View Source CanMutate(object?) Determines whether this instance can mutate the specified value. Declaration bool CanMutate(object? value) Parameters Type Name Description object value The value. Returns Type Description bool true if this instance can mutate the specified value; otherwise, false. | Improve this Doc View Source Mutate(object?) Mutates the specified value. Declaration object? Mutate(object? value) Parameters Type Name Description object value The value. Returns Type Description object The mutated value. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Mutator.Interfaces.html": {
    "href": "api/Mecha.Core.Mutator.Interfaces.html",
    "title": "Namespace Mecha.Core.Mutator.Interfaces | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Mutator.Interfaces Interfaces IMutator Mutator interface"
  },
  "api/Mecha.Core.Mutator.MutatorManager.html": {
    "href": "api/Mecha.Core.Mutator.MutatorManager.html",
    "title": "Class MutatorManager | Mecha API Reference",
    "keywords": "Class MutatorManager Mutator manager Inheritance object MutatorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Mutator Assembly: Mecha.Core.dll Syntax public class MutatorManager Constructors | Improve this Doc View Source MutatorManager(IEnumerable<IMutator>) Initializes a new instance of the MutatorManager class. Declaration public MutatorManager(IEnumerable<IMutator> mutators) Parameters Type Name Description IEnumerable<IMutator> mutators The mutators. Methods | Improve this Doc View Source Mutate(object?) Mutates the specified value. Declaration public object? Mutate(object? value) Parameters Type Name Description object value The value. Returns Type Description object The mutated value. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Mutator.html": {
    "href": "api/Mecha.Core.Mutator.html",
    "title": "Namespace Mecha.Core.Mutator | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Mutator Classes MutatorManager Mutator manager"
  },
  "api/Mecha.Core.Options.html": {
    "href": "api/Mecha.Core.Options.html",
    "title": "Class Options | Mecha API Reference",
    "keywords": "Class Options Options Inheritance object Options Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core Assembly: Mecha.Core.dll Syntax public class Options Properties | Improve this Doc View Source Default Gets the default. Declaration public static Options Default { get; } Property Value Type Description Options The default. | Improve this Doc View Source DiscoverInheritedMethods Gets or sets a value indicating whether [discover inherited methods]. Declaration public bool DiscoverInheritedMethods { get; set; } Property Value Type Description bool true if [discover inherited methods]; otherwise, false. | Improve this Doc View Source ExceptionHandlers Gets or sets the exceptions to ignore. Declaration public ExceptionHandler? ExceptionHandlers { get; set; } Property Value Type Description ExceptionHandler The exceptions to ignore. | Improve this Doc View Source GenerationCount Gets the number of generated items to create. Declaration public int GenerationCount { get; set; } Property Value Type Description int The number of generated items to create. | Improve this Doc View Source MaxDuration Gets the max duration to run the tests for. Declaration public int MaxDuration { get; set; } Property Value Type Description int The max duration to run the tests for. | Improve this Doc View Source MaxMutationCount Gets or sets the maximum mutation count. Declaration public int MaxMutationCount { get; set; } Property Value Type Description int The maximum mutation count. | Improve this Doc View Source MaxShrinkCount Gets or sets the maximum shrink count. Declaration public int MaxShrinkCount { get; set; } Property Value Type Description int The maximum shrink count. | Improve this Doc View Source Verbose Gets or sets a value indicating whether this Options is verbose. Declaration public bool Verbose { get; set; } Property Value Type Description bool true if verbose; otherwise, false. Extension Methods OptionsExtensions.Initialize(Options?) UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.OptionsExtensions.html": {
    "href": "api/Mecha.Core.OptionsExtensions.html",
    "title": "Class OptionsExtensions | Mecha API Reference",
    "keywords": "Class OptionsExtensions Options extensions Inheritance object OptionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core Assembly: Mecha.Core.dll Syntax public static class OptionsExtensions Methods | Improve this Doc View Source Initialize(Options?) Initializes the specified options. Declaration public static Options Initialize(this Options? options) Parameters Type Name Description Options options The options. Returns Type Description Options Options after being initialized."
  },
  "api/Mecha.Core.Runner.BaseClasses.RunnerBaseClass.html": {
    "href": "api/Mecha.Core.Runner.BaseClasses.RunnerBaseClass.html",
    "title": "Class RunnerBaseClass | Mecha API Reference",
    "keywords": "Class RunnerBaseClass Runner base class Inheritance object RunnerBaseClass DefaultRunner Implements IRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Runner.BaseClasses Assembly: Mecha.Core.dll Syntax public abstract class RunnerBaseClass : IRunner Constructors | Improve this Doc View Source RunnerBaseClass(Random) Initializes a new instance of the RunnerBaseClass class. Declaration protected RunnerBaseClass(Random random) Parameters Type Name Description Random random Properties | Improve this Doc View Source Manager Gets or sets the manager. Declaration protected Mech? Manager { get; set; } Property Value Type Description Mech The manager. | Improve this Doc View Source Random Gets the random. Declaration protected Random Random { get; } Property Value Type Description Random The random. Methods | Improve this Doc View Source FinishRun(MethodInfo, object?, Options, List<RunResult>) Finishes the run and converts the list of runs to a finished result. Declaration protected abstract Result FinishRun(MethodInfo runMethod, object? target, Options options, List<RunResult> results) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. List<RunResult> results The results. Returns Type Description Result The result for the run. | Improve this Doc View Source GenerateArguments(MethodInfo, Options) Generates the arguments. Declaration protected ParameterValues[] GenerateArguments(MethodInfo methodInfo, Options options) Parameters Type Name Description MethodInfo methodInfo The method information. Options options The options. Returns Type Description ParameterValues[] The generated arguments. | Improve this Doc View Source MutateAsync(List<RunResult>, Options) Attempts to mutate the successful runs asynchronously. Declaration protected Task<List<RunResult>> MutateAsync(List<RunResult> runs, Options options) Parameters Type Name Description List<RunResult> runs The runs. Options options The options. Returns Type Description Task<List<RunResult>> The resulting runs. | Improve this Doc View Source ReloadTests(MethodInfo) Reloads the arguments. Declaration protected List<object?[]> ReloadTests(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method information. Returns Type Description List<object[]> | Improve this Doc View Source RunAsync(MethodInfo?, object?, Options) Runs the specified method on the target class. Declaration public Task<Result> RunAsync(MethodInfo? runMethod, object? target, Options options) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. Returns Type Description Task<Result> The result. | Improve this Doc View Source SaveArguments(MethodInfo, object?[]) Saves the arguments. Declaration protected void SaveArguments(MethodInfo method, object?[] data) Parameters Type Name Description MethodInfo method The method. object[] data The data. | Improve this Doc View Source ShrinkAsync(List<RunResult>, Options) Shrinks this instance. Declaration protected Task<List<RunResult>> ShrinkAsync(List<RunResult> runs, Options options) Parameters Type Name Description List<RunResult> runs The runs. Options options The options. Returns Type Description Task<List<RunResult>> The shrunk run. | Improve this Doc View Source StartRun(MethodInfo, object?, Options) Called at the start of the run. Declaration protected abstract void StartRun(MethodInfo runMethod, object? target, Options options) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. Implements IRunner Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Runner.BaseClasses.html": {
    "href": "api/Mecha.Core.Runner.BaseClasses.html",
    "title": "Namespace Mecha.Core.Runner.BaseClasses | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Runner.BaseClasses Classes RunnerBaseClass Runner base class"
  },
  "api/Mecha.Core.Runner.DefaultRunner.html": {
    "href": "api/Mecha.Core.Runner.DefaultRunner.html",
    "title": "Class DefaultRunner | Mecha API Reference",
    "keywords": "Class DefaultRunner Default runner Inheritance object RunnerBaseClass DefaultRunner Implements IRunner Inherited Members RunnerBaseClass.Random RunnerBaseClass.Manager RunnerBaseClass.RunAsync(MethodInfo, object, Options) RunnerBaseClass.GenerateArguments(MethodInfo, Options) RunnerBaseClass.MutateAsync(List<RunResult>, Options) RunnerBaseClass.ReloadTests(MethodInfo) RunnerBaseClass.SaveArguments(MethodInfo, object[]) RunnerBaseClass.ShrinkAsync(List<RunResult>, Options) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Runner Assembly: Mecha.Core.dll Syntax public class DefaultRunner : RunnerBaseClass, IRunner Constructors | Improve this Doc View Source DefaultRunner(Random) Initializes a new instance of the DefaultRunner class. Declaration public DefaultRunner(Random random) Parameters Type Name Description Random random See Also IRunner Methods | Improve this Doc View Source FinishRun(MethodInfo, object?, Options, List<RunResult>) Finishes the run and converts the list of runs to a finished result. Declaration protected override Result FinishRun(MethodInfo runMethod, object? target, Options options, List<RunResult> results) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. List<RunResult> results The results. Returns Type Description Result The result for the run. Overrides RunnerBaseClass.FinishRun(MethodInfo, object?, Options, List<RunResult>) See Also IRunner | Improve this Doc View Source StartRun(MethodInfo, object?, Options) Called at the start of the run. Declaration protected override void StartRun(MethodInfo runMethod, object? target, Options options) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. Overrides RunnerBaseClass.StartRun(MethodInfo, object?, Options) See Also IRunner Implements IRunner Extension Methods UtilsExtensions.IsInfinite(object?) See Also IRunner"
  },
  "api/Mecha.Core.Runner.Interfaces.IRunner.html": {
    "href": "api/Mecha.Core.Runner.Interfaces.IRunner.html",
    "title": "Interface IRunner | Mecha API Reference",
    "keywords": "Interface IRunner Test runner interface Namespace: Mecha.Core.Runner.Interfaces Assembly: Mecha.Core.dll Syntax public interface IRunner Methods | Improve this Doc View Source RunAsync(MethodInfo?, object?, Options) Runs the specified method on the target class. Declaration Task<Result> RunAsync(MethodInfo? runMethod, object? target, Options options) Parameters Type Name Description MethodInfo runMethod The run method. object target The target. Options options The options. Returns Type Description Task<Result> The result. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Runner.Interfaces.html": {
    "href": "api/Mecha.Core.Runner.Interfaces.html",
    "title": "Namespace Mecha.Core.Runner.Interfaces | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Runner.Interfaces Interfaces IRunner Test runner interface"
  },
  "api/Mecha.Core.Runner.Parameter.html": {
    "href": "api/Mecha.Core.Runner.Parameter.html",
    "title": "Class Parameter | Mecha API Reference",
    "keywords": "Class Parameter Parameter value Inheritance object Parameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Mecha.Core.Runner Assembly: Mecha.Core.dll Syntax public class Parameter Constructors | Improve this Doc View Source Parameter(ParameterInfo) Initializes a new instance of the Parameter class. Declaration public Parameter(ParameterInfo parameter) Parameters Type Name Description ParameterInfo parameter The parameter. | Improve this Doc View Source Parameter(ParameterInfo, object?) Initializes a new instance of the Parameter class. Declaration public Parameter(ParameterInfo parameter, object? value) Parameters Type Name Description ParameterInfo parameter The parameter. object value The value. | Improve this Doc View Source Parameter(ParameterInfo, object?, int, int) Initializes a new instance of the Parameter class. Declaration public Parameter(ParameterInfo parameter, object? value, int shrinkCount, int mutationCount) Parameters Type Name Description ParameterInfo parameter The parameter. object value The value. int shrinkCount The shrink count. int mutationCount The mutation count. Properties | Improve this Doc View Source MutationCount Gets the mutate count. Declaration public int MutationCount { get; } Property Value Type Description int The mutate count. | Improve this Doc View Source ParameterInfo Gets or sets the name. Declaration public ParameterInfo ParameterInfo { get; } Property Value Type Description ParameterInfo The name. | Improve this Doc View Source ShrinkCount Gets or sets the shrink count. Declaration public int ShrinkCount { get; } Property Value Type Description int The shrink count. | Improve this Doc View Source Value Gets or sets the value. Declaration public object? Value { get; } Property Value Type Description object The value. Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public Parameter Copy() Returns Type Description Parameter | Improve this Doc View Source Mutate(MutatorManager?, List<RunResult>) Mutates the parameter. Declaration public bool Mutate(MutatorManager? mutator, List<RunResult> results) Parameters Type Name Description MutatorManager mutator The mutator. List<RunResult> results The results. Returns Type Description bool True if it is mutated, false otherwise. | Improve this Doc View Source Same(Parameter) Determines if the values are the same Declaration public bool Same(Parameter value) Parameters Type Name Description Parameter value The value. Returns Type Description bool True if they are, false otherwise | Improve this Doc View Source Shrink(ShrinkerManager?, List<RunResult>) Shrinks the specified shrinker. Declaration public bool Shrink(ShrinkerManager? shrinker, List<RunResult> results) Parameters Type Name Description ShrinkerManager shrinker The shrinker. List<RunResult> results The results. Returns Type Description bool | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Runner.Result.html": {
    "href": "api/Mecha.Core.Runner.Result.html",
    "title": "Class Result | Mecha API Reference",
    "keywords": "Class Result Result data holder Inheritance object Result Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Runner Assembly: Mecha.Core.dll Syntax public class Result Properties | Improve this Doc View Source Exception Gets or sets the exception. Declaration public Exception? Exception { get; set; } Property Value Type Description Exception The exception. | Improve this Doc View Source ExecutionTime Gets or sets the execution time. Declaration public decimal ExecutionTime { get; set; } Property Value Type Description decimal The execution time. | Improve this Doc View Source Output Gets or sets the output. Declaration public string? Output { get; set; } Property Value Type Description string The output. | Improve this Doc View Source Passed Gets or sets a value indicating whether this Result is passed. Declaration public bool Passed { get; set; } Property Value Type Description bool true if passed; otherwise, false. | Improve this Doc View Source Skipped Gets the skipped. Declaration public static Result Skipped { get; } Property Value Type Description Result The skipped. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Runner.RunResult.html": {
    "href": "api/Mecha.Core.Runner.RunResult.html",
    "title": "Class RunResult | Mecha API Reference",
    "keywords": "Class RunResult Individual run result Inheritance object RunResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Mecha.Core.Runner Assembly: Mecha.Core.dll Syntax public class RunResult Constructors | Improve this Doc View Source RunResult(MethodInfo, object?, object?[]) Initializes a new instance of the RunResult class. Declaration public RunResult(MethodInfo method, object? target, object?[] parameterValues) Parameters Type Name Description MethodInfo method The method. object target The target. object[] parameterValues The parameter values. Properties | Improve this Doc View Source ElapsedTime Gets or sets the elapsed time. Declaration public decimal ElapsedTime { get; } Property Value Type Description decimal The elapsed time. | Improve this Doc View Source Exception Gets or sets the exception. Declaration public Exception? Exception { get; } Property Value Type Description Exception The exception. | Improve this Doc View Source Method Gets or sets the method. Declaration public MethodInfo Method { get; } Property Value Type Description MethodInfo The method. | Improve this Doc View Source MutationCount Gets the mutation count. Declaration public int MutationCount { get; } Property Value Type Description int The mutation count. | Improve this Doc View Source Parameters Gets or sets the parameters used. Declaration public Parameter[] Parameters { get; } Property Value Type Description Parameter[] The parameters used. | Improve this Doc View Source ReturnedValue Gets or sets the returned value. Declaration public object? ReturnedValue { get; } Property Value Type Description object The returned value. | Improve this Doc View Source ShrinkCount Gets or sets the shrink count. Declaration public int ShrinkCount { get; } Property Value Type Description int The shrink count. | Improve this Doc View Source Target Gets or sets the target. Declaration public object? Target { get; } Property Value Type Description object The target. Methods | Improve this Doc View Source Copy() Copies this instance. Declaration public RunResult Copy() Returns Type Description RunResult The copy. | Improve this Doc View Source Mutate(MutatorManager?, List<RunResult>, Options) Mutates the specified mutator. Declaration public bool Mutate(MutatorManager? mutator, List<RunResult> results, Options options) Parameters Type Name Description MutatorManager mutator The mutator. List<RunResult> results The results. Options options The options. Returns Type Description bool True if it is mutated, false otherwise. | Improve this Doc View Source RunAsync(Stopwatch, Options) Runs the specified timer. Declaration public Task<bool> RunAsync(Stopwatch timer, Options options) Parameters Type Name Description Stopwatch timer The timer. Options options The options. Returns Type Description Task<bool> True if it runs successfully, false otherwise. | Improve this Doc View Source Same(RunResult) Determines if this is the same as another run result. Declaration public bool Same(RunResult runResult) Parameters Type Name Description RunResult runResult The run result. Returns Type Description bool True if they are the same, false otherwise. | Improve this Doc View Source Shrink(ShrinkerManager?, List<RunResult>, Options) Shrinks the specified shrinker. Declaration public bool Shrink(ShrinkerManager? shrinker, List<RunResult> results, Options options) Parameters Type Name Description ShrinkerManager shrinker The shrinker. List<RunResult> results The results. Options options The options. Returns Type Description bool True if it is shrunk, false otherwise. | Improve this Doc View Source ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Runner.TestRunnerManager.html": {
    "href": "api/Mecha.Core.Runner.TestRunnerManager.html",
    "title": "Class TestRunnerManager | Mecha API Reference",
    "keywords": "Class TestRunnerManager Test runner manager Inheritance object TestRunnerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Runner Assembly: Mecha.Core.dll Syntax public class TestRunnerManager Constructors | Improve this Doc View Source TestRunnerManager(IEnumerable<IRunner>) Initializes a new instance of the TestRunnerManager class. Declaration public TestRunnerManager(IEnumerable<IRunner> runners) Parameters Type Name Description IEnumerable<IRunner> runners The runners. Methods | Improve this Doc View Source RunAsync(MethodInfo?, object?, Options) Runs the specified method information. Declaration public Task<Result> RunAsync(MethodInfo? methodInfo, object? target, Options options) Parameters Type Name Description MethodInfo methodInfo The method information. object target The target. Options options The options. Returns Type Description Task<Result> Results Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Runner.html": {
    "href": "api/Mecha.Core.Runner.html",
    "title": "Namespace Mecha.Core.Runner | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Runner Classes DefaultRunner Default runner Parameter Parameter value Result Result data holder RunResult Individual run result TestRunnerManager Test runner manager"
  },
  "api/Mecha.Core.Shrinker.Defaults.ArrayShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.ArrayShrinker.html",
    "title": "Class ArrayShrinker | Mecha API Reference",
    "keywords": "Class ArrayShrinker Array shrinker Inheritance object ArrayShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Shrinker.Defaults Assembly: Mecha.Core.dll Syntax public class ArrayShrinker : IShrinker Methods | Improve this Doc View Source CanShrink(object?) Determines whether this instance can shrink. Declaration public bool CanShrink(object? value) Parameters Type Name Description object value Returns Type Description bool true if this instance can shrink; otherwise, false. See Also IShrinker | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration public object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object See Also IShrinker Implements IShrinker Extension Methods UtilsExtensions.IsInfinite(object?) See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.DictionaryShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.DictionaryShrinker.html",
    "title": "Class DictionaryShrinker | Mecha API Reference",
    "keywords": "Class DictionaryShrinker List shrinker Inheritance object DictionaryShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Shrinker.Defaults Assembly: Mecha.Core.dll Syntax public class DictionaryShrinker : IShrinker Methods | Improve this Doc View Source CanShrink(object?) Determines whether this instance can shrink. Declaration public bool CanShrink(object? value) Parameters Type Name Description object value Returns Type Description bool true if this instance can shrink; otherwise, false. See Also IShrinker | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration public object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object See Also IShrinker Implements IShrinker Extension Methods UtilsExtensions.IsInfinite(object?) See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.ListShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.ListShrinker.html",
    "title": "Class ListShrinker | Mecha API Reference",
    "keywords": "Class ListShrinker List shrinker Inheritance object ListShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Shrinker.Defaults Assembly: Mecha.Core.dll Syntax public class ListShrinker : IShrinker Methods | Improve this Doc View Source CanShrink(object?) Determines whether this instance can shrink. Declaration public bool CanShrink(object? value) Parameters Type Name Description object value Returns Type Description bool true if this instance can shrink; otherwise, false. See Also IShrinker | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration public object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object See Also IShrinker Implements IShrinker Extension Methods UtilsExtensions.IsInfinite(object?) See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.NumberShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.NumberShrinker.html",
    "title": "Class NumberShrinker | Mecha API Reference",
    "keywords": "Class NumberShrinker Number shrinker Inheritance object NumberShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Shrinker.Defaults Assembly: Mecha.Core.dll Syntax public class NumberShrinker : IShrinker Methods | Improve this Doc View Source CanShrink(object?) Determines whether this instance can shrink. Declaration public bool CanShrink(object? value) Parameters Type Name Description object value Returns Type Description bool true if this instance can shrink; otherwise, false. See Also IShrinker | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration public object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object See Also IShrinker Implements IShrinker Extension Methods UtilsExtensions.IsInfinite(object?) See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.StringShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.StringShrinker.html",
    "title": "Class StringShrinker | Mecha API Reference",
    "keywords": "Class StringShrinker String shrinker Inheritance object StringShrinker Implements IShrinker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Shrinker.Defaults Assembly: Mecha.Core.dll Syntax public class StringShrinker : IShrinker Methods | Improve this Doc View Source CanShrink(object?) Determines whether this instance can shrink. Declaration public bool CanShrink(object? value) Parameters Type Name Description object value Returns Type Description bool true if this instance can shrink; otherwise, false. See Also IShrinker | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration public object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object See Also IShrinker Implements IShrinker Extension Methods UtilsExtensions.IsInfinite(object?) See Also IShrinker"
  },
  "api/Mecha.Core.Shrinker.Defaults.html": {
    "href": "api/Mecha.Core.Shrinker.Defaults.html",
    "title": "Namespace Mecha.Core.Shrinker.Defaults | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Shrinker.Defaults Classes ArrayShrinker Array shrinker DictionaryShrinker List shrinker ListShrinker List shrinker NumberShrinker Number shrinker StringShrinker String shrinker"
  },
  "api/Mecha.Core.Shrinker.Interfaces.IShrinker.html": {
    "href": "api/Mecha.Core.Shrinker.Interfaces.IShrinker.html",
    "title": "Interface IShrinker | Mecha API Reference",
    "keywords": "Interface IShrinker Shrinker interface Namespace: Mecha.Core.Shrinker.Interfaces Assembly: Mecha.Core.dll Syntax public interface IShrinker Methods | Improve this Doc View Source CanShrink(object?) Determines whether this instance can shrink. Declaration bool CanShrink(object? value) Parameters Type Name Description object value Returns Type Description bool true if this instance can shrink; otherwise, false. | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object The \"shrunk\" value. Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Shrinker.Interfaces.html": {
    "href": "api/Mecha.Core.Shrinker.Interfaces.html",
    "title": "Namespace Mecha.Core.Shrinker.Interfaces | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Shrinker.Interfaces Interfaces IShrinker Shrinker interface"
  },
  "api/Mecha.Core.Shrinker.ShrinkerManager.html": {
    "href": "api/Mecha.Core.Shrinker.ShrinkerManager.html",
    "title": "Class ShrinkerManager | Mecha API Reference",
    "keywords": "Class ShrinkerManager Shrinker manager Inheritance object ShrinkerManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.Core.Shrinker Assembly: Mecha.Core.dll Syntax public class ShrinkerManager Constructors | Improve this Doc View Source ShrinkerManager(IEnumerable<IShrinker>) Initializes a new instance of the ShrinkerManager class. Declaration public ShrinkerManager(IEnumerable<IShrinker> shrinkers) Parameters Type Name Description IEnumerable<IShrinker> shrinkers The shrinkers. Methods | Improve this Doc View Source Shrink(object?) Shrinks the specified value. Declaration public object? Shrink(object? value) Parameters Type Name Description object value The value. Returns Type Description object The \"shrunk\" value Extension Methods UtilsExtensions.IsInfinite(object?)"
  },
  "api/Mecha.Core.Shrinker.html": {
    "href": "api/Mecha.Core.Shrinker.html",
    "title": "Namespace Mecha.Core.Shrinker | Mecha API Reference",
    "keywords": "Namespace Mecha.Core.Shrinker Classes ShrinkerManager Shrinker manager"
  },
  "api/Mecha.Core.html": {
    "href": "api/Mecha.Core.html",
    "title": "Namespace Mecha.Core | Mecha API Reference",
    "keywords": "Namespace Mecha.Core Classes DoNotBreakAttribute Property attribute ExceptionHandler Exception handler Mech Main class for breaking the Options Options OptionsExtensions Options extensions"
  },
  "api/Mecha.xUnit.PropertyAttribute.html": {
    "href": "api/Mecha.xUnit.PropertyAttribute.html",
    "title": "Class PropertyAttribute | Mecha API Reference",
    "keywords": "Class PropertyAttribute Property attribute Inheritance object Attribute FactAttribute PropertyAttribute Inherited Members FactAttribute.DisplayName FactAttribute.Skip FactAttribute.Timeout Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.xUnit Assembly: Mecha.xUnit.dll Syntax [XunitTestCaseDiscoverer(\"Mecha.xUnit.PropertyDiscoverer\", \"Mecha.xUnit\")] [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property, AllowMultiple = false)] public class PropertyAttribute : FactAttribute Properties | Improve this Doc View Source GenerationCount Gets the number of randomly generated items to create. Declaration public int GenerationCount { get; set; } Property Value Type Description int The number of randomly generated items to create. See Also FactAttribute | Improve this Doc View Source MaxDuration Gets the max duration to run the tests for. Declaration public int MaxDuration { get; set; } Property Value Type Description int The max duration to run the tests for. See Also FactAttribute | Improve this Doc View Source MaxShrinkCount Gets or sets the maximum shrink count. Declaration public int MaxShrinkCount { get; set; } Property Value Type Description int The maximum shrink count. See Also FactAttribute | Improve this Doc View Source Verbose Gets or sets a value indicating whether this PropertyAttribute is verbose. Declaration public bool Verbose { get; set; } Property Value Type Description bool true if verbose; otherwise, false. See Also FactAttribute Extension Methods UtilsExtensions.IsInfinite(object?) See Also FactAttribute"
  },
  "api/Mecha.xUnit.PropertyDiscoverer.html": {
    "href": "api/Mecha.xUnit.PropertyDiscoverer.html",
    "title": "Class PropertyDiscoverer | Mecha API Reference",
    "keywords": "Class PropertyDiscoverer Property discoverer Inheritance object PropertyDiscoverer Implements IXunitTestCaseDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.xUnit Assembly: Mecha.xUnit.dll Syntax public class PropertyDiscoverer : IXunitTestCaseDiscoverer Constructors | Improve this Doc View Source PropertyDiscoverer() Initializes a new instance of the PropertyDiscoverer class. Declaration public PropertyDiscoverer() See Also IXunitTestCaseDiscoverer | Improve this Doc View Source PropertyDiscoverer(IMessageSink?) Initializes a new instance of the PropertyDiscoverer class. Declaration public PropertyDiscoverer(IMessageSink? messageSink) Parameters Type Name Description IMessageSink messageSink The message sink. See Also IXunitTestCaseDiscoverer Properties | Improve this Doc View Source MessageSink Gets the message sink. Declaration public IMessageSink? MessageSink { get; } Property Value Type Description IMessageSink The message sink. See Also IXunitTestCaseDiscoverer Methods | Improve this Doc View Source Discover(ITestFrameworkDiscoveryOptions, ITestMethod, IAttributeInfo) Discover test cases from a test method. Declaration public IEnumerable<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute) Parameters Type Name Description ITestFrameworkDiscoveryOptions discoveryOptions The discovery options to be used. ITestMethod testMethod The test method the test cases belong to. IAttributeInfo factAttribute The fact attribute attached to the test method. Returns Type Description IEnumerable<IXunitTestCase> Returns zero or more test cases represented by the test method. See Also IXunitTestCaseDiscoverer Implements Xunit.Sdk.IXunitTestCaseDiscoverer Extension Methods UtilsExtensions.IsInfinite(object?) See Also IXunitTestCaseDiscoverer"
  },
  "api/Mecha.xUnit.PropertyTestCase.html": {
    "href": "api/Mecha.xUnit.PropertyTestCase.html",
    "title": "Class PropertyTestCase | Mecha API Reference",
    "keywords": "Class PropertyTestCase Property test case Inheritance object LongLivedMarshalByRefObject TestMethodTestCase XunitTestCase PropertyTestCase Implements IDisposable IXunitTestCase ITestCase IXunitSerializable Inherited Members XunitTestCase.GetDisplayName(IAttributeInfo, string) XunitTestCase.GetSkipReason(IAttributeInfo) XunitTestCase.GetTimeout(IAttributeInfo) XunitTestCase.Initialize() XunitTestCase.Serialize(IXunitSerializationInfo) XunitTestCase.Deserialize(IXunitSerializationInfo) XunitTestCase.DiagnosticMessageSink XunitTestCase.Timeout TestMethodTestCase.Dispose() TestMethodTestCase.EnsureInitialized() TestMethodTestCase.GetUniqueID() TestMethodTestCase.BaseDisplayName TestMethodTestCase.DefaultMethodDisplay TestMethodTestCase.DefaultMethodDisplayOptions TestMethodTestCase.DisplayName TestMethodTestCase.InitializationException TestMethodTestCase.Method TestMethodTestCase.MethodGenericTypes TestMethodTestCase.SkipReason TestMethodTestCase.SourceInformation TestMethodTestCase.TestMethod TestMethodTestCase.TestMethodArguments TestMethodTestCase.Traits TestMethodTestCase.UniqueID LongLivedMarshalByRefObject.DisconnectAll() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Mecha.xUnit Assembly: Mecha.xUnit.dll Syntax public class PropertyTestCase : XunitTestCase, IDisposable, IXunitTestCase, ITestCase, IXunitSerializable Constructors | Improve this Doc View Source PropertyTestCase() Initializes a new instance of the PropertyTestCase class. Declaration public PropertyTestCase() See Also XunitTestCase | Improve this Doc View Source PropertyTestCase(IMessageSink?, TestMethodDisplay, TestMethodDisplayOptions, ITestMethod, object[]?) Initializes a new instance of the PropertyTestCase class. Declaration public PropertyTestCase(IMessageSink? diagnosticMessageSink, TestMethodDisplay defaultMethodDisplay, TestMethodDisplayOptions methodDisplayOptions, ITestMethod testMethod, object[]? testMethodArguments = null) Parameters Type Name Description IMessageSink diagnosticMessageSink The message sink used to send diagnostic messages TestMethodDisplay defaultMethodDisplay Default method display to use (when not customized). TestMethodDisplayOptions methodDisplayOptions The method display options. ITestMethod testMethod The test method this test case belongs to. object[] testMethodArguments The arguments for the test method. See Also XunitTestCase Methods | Improve this Doc View Source Init(IMessageBus, CancellationTokenSource) Initializes the specified output helper. Declaration public void Init(IMessageBus messageBus, CancellationTokenSource cancellationTokenSource) Parameters Type Name Description IMessageBus messageBus CancellationTokenSource cancellationTokenSource See Also XunitTestCase | Improve this Doc View Source RunAsync(IMessageSink, IMessageBus, object[], ExceptionAggregator, CancellationTokenSource) Runs the asynchronous. Declaration public override Task<RunSummary> RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) Parameters Type Name Description IMessageSink diagnosticMessageSink The diagnostic message sink. IMessageBus messageBus The message bus. object[] constructorArguments The constructor arguments. ExceptionAggregator aggregator The aggregator. CancellationTokenSource cancellationTokenSource The cancellation token source. Returns Type Description Task<RunSummary> Overrides XunitTestCase.RunAsync(IMessageSink, IMessageBus, object[], ExceptionAggregator, CancellationTokenSource) See Also XunitTestCase Implements IDisposable Xunit.Sdk.IXunitTestCase Xunit.Abstractions.ITestCase Xunit.Abstractions.IXunitSerializable Extension Methods UtilsExtensions.IsInfinite(object?) See Also XunitTestCase"
  },
  "api/Mecha.xUnit.html": {
    "href": "api/Mecha.xUnit.html",
    "title": "Namespace Mecha.xUnit | Mecha API Reference",
    "keywords": "Namespace Mecha.xUnit Classes PropertyAttribute Property attribute PropertyDiscoverer Property discoverer PropertyTestCase Property test case"
  },
  "api/Microsoft.Extensions.DependencyInjection.CanisterMethods.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.CanisterMethods.html",
    "title": "Class CanisterMethods | Mecha API Reference",
    "keywords": "Class CanisterMethods Canister methods Inheritance object CanisterMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: Mecha.Core.dll Syntax public static class CanisterMethods Methods | Improve this Doc View Source RegisterMecha(ICanisterConfiguration?) Registers the system with canister. Declaration public static ICanisterConfiguration? RegisterMecha(this ICanisterConfiguration? bootstrapper) Parameters Type Name Description ICanisterConfiguration bootstrapper The bootstrapper. Returns Type Description ICanisterConfiguration The bootstrapper."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Mecha API Reference",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes CanisterMethods Canister methods"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Mecha API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Mecha API Reference",
    "keywords": "Code [Property(GenerationCount = 100)] public void ValidationTest([Required] string value) { Assert.True(!string.IsNullOrEmpty(value)); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "The Code and What It's Doing | Mecha API Reference",
    "keywords": "I try to make idiot proof software but the world keeps making better idiots. Or at least that's how it seems to us much of the time. You post a new application feature and the user's find a way to break it. In reality it's because we didn't think of an edge case that they found. I mean who can possibly think up all of these possibilities? A cracked out squirrel? Perhaps a raccoon with ADHD? Neither really work out in the long run as eventually they rise up against society to overthrow it. They're trained with computers at that point so there is no stopping them. And personally I'm too lazy to do this myself so I guess that leaves writing some code to do it, but thankfully I've already done that for you. Mecha is a library to automatically test classes with the ultimate goal being to find ways to break the code. It can help with unit testing, security testing via data fuzzing, testing for concurrency issues, and check for fault tolerance. With one line of code, you can test every method in a class automatically. Best part is it ties into the testing framework that you're already using. The Code and What It's Doing Mech.BreakAsync<MyClass>(); Seriously, that's it. With that Mecha searches for any public methods and properties, loops through them, finds interesting inputs for the methods, and runs them looking for exceptions to be thrown. Once an exception is thrown, it then uses the input to find the smallest possible value that still results in an issue. It then saves these issues as test cases for the future. Ok, so it breaks my method and does what? Mecha uses a concept borrowed from property testing known as shrinking. For instance you generate a list of 100 items for the method and it breaks. Mecha then removes some of the values and sees if it continues to break. It then continues to do this until it finds a list as small as possible that still breaks. Supported Types and Object Generation Mostly everything. It will generate inputs for all value types, enums, and even complete classes. It will give your methods FileStreams, HttpClients, Streams, etc. that throw exceptions themselves to see if your code can handle edge cases. Stubs/substitutes are automatically generated and fed through depending on the parameters of your method. It checks bounds, null, etc. as well. On top of that it takes into account any ValidationAttributes that it finds. So if you specify a range for a parameter, it will keep the values inside that range. Non Ninja Mutants On a successful run where no exception is thrown the input values are potentially mutated in ways that are known to cause issues. For instance adding \\0 in the middle of a string, etc. These are then run through the system to see if they can break the code. If they do, they're added to the set of results. If not, we mutate again and rerun up until the max number of mutations that you set in the options. Shrinking All the Things On a run where an exception is thrown, the input values are \"shrunk\". This involves taking a value and making it smaller in some way. For instance if a list of 100 values throws an exception, the system will remove 20 of them and try again. If it throws an exception, we shrink it again and again until it passes or we hit the max number of shrinks set in the options. Getting Started All you need to do is install the framework specific library from NuGet: Framework Library xUnit.Net Mecha.xUnit All other frameworks Mecha.Core This list should grow as new supported frameworks are added. If your library isn't supported, you can get access to the Mech class itself by adding the Mecha.Core library to your project. And if you like the library and would like to support your framework of choice, we'll gladly accept pull requests to add it. Anyway, what does the framework specific libraries give you? xUnit.Net [Property] public void MyTest(int value1,int value2, ...) { ... } The above code adds the Property attribute which lets xUnit.Net know that you want to assign values for value1, value2, etc. using the library. It then aggregates all of the failed tests in one result in the Test Explorer window with details about what values broke the test. Everything Else Mech.BreakAsync<MyClass>(); There are variations of the above method depending on your needs. Also note that you can specify various options including how long it should attempt to generate values, the number of shrinks to attempt, and the number of test cases to run from the generated values. FAQ What if I have a method that I don't want the library to run? A. The library comes with a DoNotBreak Attribute. Any method marked with this will be skipped by the library. Where is it saving the failed runs for later? A. By default the system places the failed runs in a directory called Mecha under the test library's bin directory. It's possible to override this and store the information somewhere else by implementing the Mecha.Core.Datasources.Interfaces.IDatasource interface. Can I create my own data generators? A. Yes by implementing the Mecha.Core.Generator.Interfaces.IGenerator interface. The system should automatically pick them up and use them. Can I create my own data shrinker? A. Yes by implementing the Mecha.Core.Shrinker.Interfaces.IShrinker interface. The system should automatically pick them up and use them. Can I create my own data mutator? A. Yes by implementing the Mecha.Core.Mutator.Interfaces.IMutator interface. The system should automatically pick them up and use them."
  }
}